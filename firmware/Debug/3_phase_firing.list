
3_phase_firing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002214  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002340  08002340  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002340  08002340  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002340  08002340  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002354  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002354  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080f1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001518  00000000  00000000  00028126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00029640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001619a  00000000  00000000  0002a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090b1  00000000  00000000  000409a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a1c  00000000  00000000  00049a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb46f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002600  00000000  00000000  000cb4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002308 	.word	0x08002308

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002308 	.word	0x08002308

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 faa1 	bl	8000698 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f82a 	bl	80001ae <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f927 	bl	80003ac <MX_GPIO_Init>
	MX_TIM1_Init();
 800015e:	f000 f86b 	bl	8000238 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// HAL_OP_Init();
	set_alpha(2500);
 8000162:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000166:	f000 f96d 	bl	8000444 <set_alpha>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		for(int i = 0; i < 10000; i++){
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e008      	b.n	8000182 <main+0x36>
			set_alpha(i);
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f000 f967 	bl	8000444 <set_alpha>
			HAL_Delay(2);
 8000176:	2002      	movs	r0, #2
 8000178:	f000 faf0 	bl	800075c <HAL_Delay>
		for(int i = 0; i < 10000; i++){
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f242 720f 	movw	r2, #9999	; 0x270f
 8000188:	4293      	cmp	r3, r2
 800018a:	ddf1      	ble.n	8000170 <main+0x24>
		}

		for(int i = 10000; i > 0; i--){
 800018c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000190:	603b      	str	r3, [r7, #0]
 8000192:	e008      	b.n	80001a6 <main+0x5a>
			set_alpha(i);
 8000194:	6838      	ldr	r0, [r7, #0]
 8000196:	f000 f955 	bl	8000444 <set_alpha>
			HAL_Delay(2);
 800019a:	2002      	movs	r0, #2
 800019c:	f000 fade 	bl	800075c <HAL_Delay>
		for(int i = 10000; i > 0; i--){
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	3b01      	subs	r3, #1
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	dcf3      	bgt.n	8000194 <main+0x48>
		for(int i = 0; i < 10000; i++){
 80001ac:	e7dd      	b.n	800016a <main+0x1e>

080001ae <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	b090      	sub	sp, #64	; 0x40
 80001b2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	2228      	movs	r2, #40	; 0x28
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 f89b 	bl	80022f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fd90 	bl	8000d1c <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000202:	f000 f957 	bl	80004b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020a:	2302      	movs	r3, #2
 800020c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000216:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2101      	movs	r1, #1
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fffd 	bl	8001220 <HAL_RCC_ClockConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x82>
	{
		Error_Handler();
 800022c:	f000 f942 	bl	80004b4 <Error_Handler>
	}
}
 8000230:	bf00      	nop
 8000232:	3740      	adds	r7, #64	; 0x40
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000256:	4b51      	ldr	r3, [pc, #324]	; (800039c <MX_TIM1_Init+0x164>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a50      	ldr	r2, [pc, #320]	; (800039c <MX_TIM1_Init+0x164>)
 800025c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b4e      	ldr	r3, [pc, #312]	; (800039c <MX_TIM1_Init+0x164>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800026e:	4b4c      	ldr	r3, [pc, #304]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000270:	4a4c      	ldr	r2, [pc, #304]	; (80003a4 <MX_TIM1_Init+0x16c>)
 8000272:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48-1;
 8000274:	4b4a      	ldr	r3, [pc, #296]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000276:	222f      	movs	r2, #47	; 0x2f
 8000278:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027a:	4b49      	ldr	r3, [pc, #292]	; (80003a0 <MX_TIM1_Init+0x168>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3000;
 8000280:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000282:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000286:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000288:	4b45      	ldr	r3, [pc, #276]	; (80003a0 <MX_TIM1_Init+0x168>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800028e:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000290:	2200      	movs	r2, #0
 8000292:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000294:	4b42      	ldr	r3, [pc, #264]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800029a:	4841      	ldr	r0, [pc, #260]	; (80003a0 <MX_TIM1_Init+0x168>)
 800029c:	f001 f9ca 	bl	8001634 <HAL_TIM_IC_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_TIM1_Init+0x72>
	{
		Error_Handler();
 80002a6:	f000 f905 	bl	80004b4 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80002aa:	2108      	movs	r1, #8
 80002ac:	483c      	ldr	r0, [pc, #240]	; (80003a0 <MX_TIM1_Init+0x168>)
 80002ae:	f001 fa10 	bl	80016d2 <HAL_TIM_OnePulse_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM1_Init+0x84>
	{
		Error_Handler();
 80002b8:	f000 f8fc 	bl	80004b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4619      	mov	r1, r3
 80002ca:	4835      	ldr	r0, [pc, #212]	; (80003a0 <MX_TIM1_Init+0x168>)
 80002cc:	f001 ff86 	bl	80021dc <HAL_TIMEx_MasterConfigSynchronization>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM1_Init+0xa2>
	{
		Error_Handler();
 80002d6:	f000 f8ed 	bl	80004b4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80002de:	2301      	movs	r3, #1
 80002e0:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
	sConfigIC.ICFilter = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2204      	movs	r2, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	482b      	ldr	r0, [pc, #172]	; (80003a0 <MX_TIM1_Init+0x168>)
 80002f4:	f001 fba4 	bl	8001a40 <HAL_TIM_IC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80002fe:	f000 f8d9 	bl	80004b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	if(HAL_TIM_Base_Init(&htim1) != HAL_OK){
 8000302:	4827      	ldr	r0, [pc, #156]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000304:	f001 f8f2 	bl	80014ec <HAL_TIM_Base_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM1_Init+0xda>
		Error_Handler();
 800030e:	f000 f8d1 	bl	80004b4 <Error_Handler>
	}



	if(HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK){
 8000312:	2108      	movs	r1, #8
 8000314:	4822      	ldr	r0, [pc, #136]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000316:	f001 f9dc 	bl	80016d2 <HAL_TIM_OnePulse_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM1_Init+0xec>
		Error_Handler();
 8000320:	f000 f8c8 	bl	80004b4 <Error_Handler>
	}

	OPConfig.OCMode = TIM_OCMODE_PWM2;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000326:	2270      	movs	r2, #112	; 0x70
 8000328:	601a      	str	r2, [r3, #0]
	OPConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_TIM1_Init+0x170>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
	OPConfig.Pulse        = 1000;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000336:	605a      	str	r2, [r3, #4]
	OPConfig.ICPolarity   = TIM_ICPOLARITY_RISING;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_TIM1_Init+0x170>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
	OPConfig.ICSelection  = TIM_ICSELECTION_DIRECTTI;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000340:	2201      	movs	r2, #1
 8000342:	61da      	str	r2, [r3, #28]
	OPConfig.ICFilter     = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
	OPConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_TIM1_Init+0x170>)
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
	OPConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
	OPConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]

	if(HAL_TIM_OnePulse_ConfigChannel(&htim1, &OPConfig, TIM_CHANNEL_1, TIM_CHANNEL_2) != HAL_OK){
 800035c:	2304      	movs	r3, #4
 800035e:	2200      	movs	r2, #0
 8000360:	4911      	ldr	r1, [pc, #68]	; (80003a8 <MX_TIM1_Init+0x170>)
 8000362:	480f      	ldr	r0, [pc, #60]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000364:	f001 fc00 	bl	8001b68 <HAL_TIM_OnePulse_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0x13a>
		Error_Handler();
 800036e:	f000 f8a1 	bl	80004b4 <Error_Handler>
	}

	if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000374:	f001 f912 	bl	800159c <HAL_TIM_Base_Start_IT>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM1_Init+0x14a>
		Error_Handler();
 800037e:	f000 f899 	bl	80004b4 <Error_Handler>
	}

	if(HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1) != HAL_OK){
 8000382:	2100      	movs	r1, #0
 8000384:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_TIM1_Init+0x168>)
 8000386:	f001 f9fd 	bl	8001784 <HAL_TIM_OnePulse_Start>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM1_Init+0x15c>
		Error_Handler();
 8000390:	f000 f890 	bl	80004b4 <Error_Handler>
	}
	/* USER CODE END TIM1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	3720      	adds	r7, #32
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40012c00 	.word	0x40012c00
 80003a8:	20000074 	.word	0x20000074

080003ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_GPIO_Init+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	; (800043c <MX_GPIO_Init+0x90>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_GPIO_Init+0x90>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_GPIO_Init+0x90>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <MX_GPIO_Init+0x90>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_GPIO_Init+0x90>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_GPIO_Init+0x90>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	; (800043c <MX_GPIO_Init+0x90>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_GPIO_Init+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <MX_GPIO_Init+0x94>)
 8000410:	f000 fc52 	bl	8000cb8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000418:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_GPIO_Init+0x94>)
 800042e:	f000 fac7 	bl	80009c0 <HAL_GPIO_Init>

}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000

08000444 <set_alpha>:

/* USER CODE BEGIN 4 */
/*
 * @brief Inisialisasi timer 1 untuk One Pulse mode pada channel 1
 */
void set_alpha(int alpha){
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <set_alpha+0x34>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(&htim1, (alpha+SCR_PULSE_WIDTH));
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <set_alpha+0x34>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000466:	461a      	mov	r2, r3
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <set_alpha+0x34>)
 800046a:	60da      	str	r2, [r3, #12]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000028 	.word	0x20000028

0800047c <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback (TIM_HandleTypeDef * htim)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a08      	ldr	r2, [pc, #32]	; (80004ac <HAL_TIM_TriggerCallback+0x30>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d108      	bne.n	80004a0 <HAL_TIM_TriggerCallback+0x24>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	7f1b      	ldrb	r3, [r3, #28]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d104      	bne.n	80004a0 <HAL_TIM_TriggerCallback+0x24>
		{
			global_pulse_flag++;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_TIM_TriggerCallback+0x34>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_TIM_TriggerCallback+0x34>)
 800049e:	6013      	str	r3, [r2, #0]

		}
	}
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40012c00 	.word	0x40012c00
 80004b0:	20000070 	.word	0x20000070

080004b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	while(1){
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80004b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <Error_Handler+0x18>)
 80004be:	f000 fc13 	bl	8000ce8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80004c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c6:	f000 f949 	bl	800075c <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80004ca:	e7f5      	b.n	80004b8 <Error_Handler+0x4>
 80004cc:	40011000 	.word	0x40011000

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <HAL_MspInit+0x5c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_MspInit+0x5c>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_MspInit+0x60>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_MspInit+0x60>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000
 8000530:	40010000 	.word	0x40010000

08000534 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <HAL_TIM_IC_MspInit+0x9c>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d139      	bne.n	80005c8 <HAL_TIM_IC_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <HAL_TIM_IC_MspInit+0xa0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <HAL_TIM_IC_MspInit+0xa0>)
 800055a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <HAL_TIM_IC_MspInit+0xa0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_TIM_IC_MspInit+0xa0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_TIM_IC_MspInit+0xa0>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <HAL_TIM_IC_MspInit+0xa0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	2302      	movs	r3, #2
 800058c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2302      	movs	r3, #2
 8000590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	4619      	mov	r1, r3
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <HAL_TIM_IC_MspInit+0xa4>)
 800059a:	f000 fa11 	bl	80009c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <HAL_TIM_IC_MspInit+0xa4>)
 80005b4:	f000 fa04 	bl	80009c0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	201a      	movs	r0, #26
 80005be:	f000 f9c8 	bl	8000952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80005c2:	201a      	movs	r0, #26
 80005c4:	f000 f9e1 	bl	800098a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40012c00 	.word	0x40012c00
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <NMI_Handler+0x4>

080005e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler+0x4>

080005ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000622:	f000 f87f 	bl	8000724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <TIM1_TRG_COM_IRQHandler+0x10>)
 8000632:	f001 f8fd 	bl	8001830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028

08000640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	; (8000684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	; (8000690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000672:	f7ff ffe5 	bl	8000640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000676:	f001 fe1b 	bl	80022b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fd67 	bl	800014c <main>
  bx lr
 800067e:	4770      	bx	lr
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000688:	08002348 	.word	0x08002348
  ldr r2, =_sbss
 800068c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000690:	2000009c 	.word	0x2000009c

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>
	...

08000698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_Init+0x28>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_Init+0x28>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 f947 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ae:	200f      	movs	r0, #15
 80006b0:	f000 f808 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b4:	f7ff ff0c 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x54>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x58>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	fbb3 f3f1 	udiv	r3, r3, r1
 80006de:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 f95f 	bl	80009a6 <HAL_SYSTICK_Config>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e00e      	b.n	8000710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d80a      	bhi.n	800070e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f8:	2200      	movs	r2, #0
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000700:	f000 f927 	bl	8000952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_InitTick+0x5c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	e000      	b.n	8000710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000000 	.word	0x20000000
 800071c:	20000008 	.word	0x20000008
 8000720:	20000004 	.word	0x20000004

08000724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x1c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x20>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a03      	ldr	r2, [pc, #12]	; (8000744 <HAL_IncTick+0x20>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	20000008 	.word	0x20000008
 8000744:	20000098 	.word	0x20000098

08000748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	; (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000098 	.word	0x20000098

0800075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000764:	f7ff fff0 	bl	8000748 <HAL_GetTick>
 8000768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000774:	d005      	beq.n	8000782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_Delay+0x44>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000782:	bf00      	nop
 8000784:	f7ff ffe0 	bl	8000748 <HAL_GetTick>
 8000788:	4602      	mov	r2, r0
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	429a      	cmp	r2, r3
 8000792:	d8f7      	bhi.n	8000784 <HAL_Delay+0x28>
  {
  }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0b      	blt.n	8000832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <__NVIC_EnableIRQ+0x34>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100

08000840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	db0a      	blt.n	800086a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	490c      	ldr	r1, [pc, #48]	; (800088c <__NVIC_SetPriority+0x4c>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	0112      	lsls	r2, r2, #4
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	440b      	add	r3, r1
 8000864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000868:	e00a      	b.n	8000880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <__NVIC_SetPriority+0x50>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	3b04      	subs	r3, #4
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	440b      	add	r3, r1
 800087e:	761a      	strb	r2, [r3, #24]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f1c3 0307 	rsb	r3, r3, #7
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	bf28      	it	cs
 80008b2:	2304      	movcs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3304      	adds	r3, #4
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d902      	bls.n	80008c4 <NVIC_EncodePriority+0x30>
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3b03      	subs	r3, #3
 80008c2:	e000      	b.n	80008c6 <NVIC_EncodePriority+0x32>
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43da      	mvns	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	401a      	ands	r2, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43d9      	mvns	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	4313      	orrs	r3, r2
         );
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3724      	adds	r7, #36	; 0x24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000908:	d301      	bcc.n	800090e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2301      	movs	r3, #1
 800090c:	e00f      	b.n	800092e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SysTick_Config+0x40>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000916:	210f      	movs	r1, #15
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800091c:	f7ff ff90 	bl	8000840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SysTick_Config+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SysTick_Config+0x40>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff2d 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000964:	f7ff ff42 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff ff90 	bl	8000894 <NVIC_EncodePriority>
 8000974:	4602      	mov	r2, r0
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff5f 	bl	8000840 <__NVIC_SetPriority>
}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff35 	bl	8000808 <__NVIC_EnableIRQ>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffa2 	bl	80008f8 <SysTick_Config>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e161      	b.n	8000c98 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d4:	2201      	movs	r2, #1
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	f040 8150 	bne.w	8000c92 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4a97      	ldr	r2, [pc, #604]	; (8000c54 <HAL_GPIO_Init+0x294>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d05e      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 80009fc:	4a95      	ldr	r2, [pc, #596]	; (8000c54 <HAL_GPIO_Init+0x294>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d875      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a02:	4a95      	ldr	r2, [pc, #596]	; (8000c58 <HAL_GPIO_Init+0x298>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d058      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a08:	4a93      	ldr	r2, [pc, #588]	; (8000c58 <HAL_GPIO_Init+0x298>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d86f      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a0e:	4a93      	ldr	r2, [pc, #588]	; (8000c5c <HAL_GPIO_Init+0x29c>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d052      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a14:	4a91      	ldr	r2, [pc, #580]	; (8000c5c <HAL_GPIO_Init+0x29c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d869      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a1a:	4a91      	ldr	r2, [pc, #580]	; (8000c60 <HAL_GPIO_Init+0x2a0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d04c      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a20:	4a8f      	ldr	r2, [pc, #572]	; (8000c60 <HAL_GPIO_Init+0x2a0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d863      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a26:	4a8f      	ldr	r2, [pc, #572]	; (8000c64 <HAL_GPIO_Init+0x2a4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d046      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a2c:	4a8d      	ldr	r2, [pc, #564]	; (8000c64 <HAL_GPIO_Init+0x2a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d85d      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d82a      	bhi.n	8000a8c <HAL_GPIO_Init+0xcc>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d859      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a3a:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <HAL_GPIO_Init+0x80>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000abb 	.word	0x08000abb
 8000a44:	08000a95 	.word	0x08000a95
 8000a48:	08000aa7 	.word	0x08000aa7
 8000a4c:	08000ae9 	.word	0x08000ae9
 8000a50:	08000aef 	.word	0x08000aef
 8000a54:	08000aef 	.word	0x08000aef
 8000a58:	08000aef 	.word	0x08000aef
 8000a5c:	08000aef 	.word	0x08000aef
 8000a60:	08000aef 	.word	0x08000aef
 8000a64:	08000aef 	.word	0x08000aef
 8000a68:	08000aef 	.word	0x08000aef
 8000a6c:	08000aef 	.word	0x08000aef
 8000a70:	08000aef 	.word	0x08000aef
 8000a74:	08000aef 	.word	0x08000aef
 8000a78:	08000aef 	.word	0x08000aef
 8000a7c:	08000aef 	.word	0x08000aef
 8000a80:	08000aef 	.word	0x08000aef
 8000a84:	08000a9d 	.word	0x08000a9d
 8000a88:	08000ab1 	.word	0x08000ab1
 8000a8c:	4a76      	ldr	r2, [pc, #472]	; (8000c68 <HAL_GPIO_Init+0x2a8>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a92:	e02c      	b.n	8000aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e029      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e024      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	3308      	adds	r3, #8
 8000aac:	623b      	str	r3, [r7, #32]
          break;
 8000aae:	e01f      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e01a      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e013      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d105      	bne.n	8000adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	611a      	str	r2, [r3, #16]
          break;
 8000ada:	e009      	b.n	8000af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	615a      	str	r2, [r3, #20]
          break;
 8000ae6:	e003      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          break;
 8000aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	2bff      	cmp	r3, #255	; 0xff
 8000af4:	d801      	bhi.n	8000afa <HAL_GPIO_Init+0x13a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	e001      	b.n	8000afe <HAL_GPIO_Init+0x13e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3304      	adds	r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2bff      	cmp	r3, #255	; 0xff
 8000b04:	d802      	bhi.n	8000b0c <HAL_GPIO_Init+0x14c>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x152>
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	3b08      	subs	r3, #8
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	210f      	movs	r1, #15
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	401a      	ands	r2, r3
 8000b24:	6a39      	ldr	r1, [r7, #32]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 80a9 	beq.w	8000c92 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b58:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <HAL_GPIO_Init+0x2b0>)
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <HAL_GPIO_Init+0x2b4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3c      	ldr	r2, [pc, #240]	; (8000c78 <HAL_GPIO_Init+0x2b8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1dc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3b      	ldr	r2, [pc, #236]	; (8000c7c <HAL_GPIO_Init+0x2bc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1d8>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb2:	492f      	ldr	r1, [pc, #188]	; (8000c70 <HAL_GPIO_Init+0x2b0>)
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	492b      	ldr	r1, [pc, #172]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	4927      	ldr	r1, [pc, #156]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4921      	ldr	r1, [pc, #132]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	491d      	ldr	r1, [pc, #116]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	4917      	ldr	r1, [pc, #92]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	608b      	str	r3, [r1, #8]
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	4913      	ldr	r1, [pc, #76]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01f      	beq.n	8000c84 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	490d      	ldr	r1, [pc, #52]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60cb      	str	r3, [r1, #12]
 8000c50:	e01f      	b.n	8000c92 <HAL_GPIO_Init+0x2d2>
 8000c52:	bf00      	nop
 8000c54:	10320000 	.word	0x10320000
 8000c58:	10310000 	.word	0x10310000
 8000c5c:	10220000 	.word	0x10220000
 8000c60:	10210000 	.word	0x10210000
 8000c64:	10120000 	.word	0x10120000
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_GPIO_Init+0x2f4>)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4909      	ldr	r1, [pc, #36]	; (8000cb4 <HAL_GPIO_Init+0x2f4>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3301      	adds	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f47f ae96 	bne.w	80009d4 <HAL_GPIO_Init+0x14>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	372c      	adds	r7, #44	; 0x2c
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc8:	787b      	ldrb	r3, [r7, #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cd4:	e003      	b.n	8000cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	041a      	lsls	r2, r3, #16
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	611a      	str	r2, [r3, #16]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	041a      	lsls	r2, r3, #16
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43d9      	mvns	r1, r3
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	400b      	ands	r3, r1
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	611a      	str	r2, [r3, #16]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e272      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8087 	beq.w	8000e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d3c:	4b92      	ldr	r3, [pc, #584]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d00c      	beq.n	8000d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d48:	4b8f      	ldr	r3, [pc, #572]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d112      	bne.n	8000d7a <HAL_RCC_OscConfig+0x5e>
 8000d54:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d60:	d10b      	bne.n	8000d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d62:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d06c      	beq.n	8000e48 <HAL_RCC_OscConfig+0x12c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d168      	bne.n	8000e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e24c      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d82:	d106      	bne.n	8000d92 <HAL_RCC_OscConfig+0x76>
 8000d84:	4b80      	ldr	r3, [pc, #512]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a7f      	ldr	r2, [pc, #508]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e02e      	b.n	8000df0 <HAL_RCC_OscConfig+0xd4>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x98>
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a7a      	ldr	r2, [pc, #488]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a77      	ldr	r2, [pc, #476]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e01d      	b.n	8000df0 <HAL_RCC_OscConfig+0xd4>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0xbc>
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a71      	ldr	r2, [pc, #452]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b6f      	ldr	r3, [pc, #444]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a6e      	ldr	r2, [pc, #440]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e00b      	b.n	8000df0 <HAL_RCC_OscConfig+0xd4>
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a6a      	ldr	r2, [pc, #424]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a67      	ldr	r2, [pc, #412]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d013      	beq.n	8000e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fca6 	bl	8000748 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e00:	f7ff fca2 	bl	8000748 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b64      	cmp	r3, #100	; 0x64
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e200      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e12:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0xe4>
 8000e1e:	e014      	b.n	8000e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc92 	bl	8000748 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fc8e 	bl	8000748 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1ec      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f0      	bne.n	8000e28 <HAL_RCC_OscConfig+0x10c>
 8000e46:	e000      	b.n	8000e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d063      	beq.n	8000f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e56:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e62:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b08      	cmp	r3, #8
 8000e6c:	d11c      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x18c>
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d116      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_RCC_OscConfig+0x176>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d001      	beq.n	8000e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e1c0      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4939      	ldr	r1, [pc, #228]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea6:	e03a      	b.n	8000f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d020      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_RCC_OscConfig+0x270>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fc47 	bl	8000748 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc43 	bl	8000748 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e1a1      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4927      	ldr	r1, [pc, #156]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
 8000ef0:	e015      	b.n	8000f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_RCC_OscConfig+0x270>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc26 	bl	8000748 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff fc22 	bl	8000748 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e180      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f0      	bne.n	8000f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d03a      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d019      	beq.n	8000f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_RCC_OscConfig+0x274>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc06 	bl	8000748 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc02 	bl	8000748 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e160      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 faa6 	bl	80014b0 <RCC_Delay>
 8000f64:	e01c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fbec 	bl	8000748 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f72:	e00f      	b.n	8000f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fbe8 	bl	8000748 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d908      	bls.n	8000f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e146      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	42420000 	.word	0x42420000
 8000f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f94:	4b92      	ldr	r3, [pc, #584]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1e9      	bne.n	8000f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80a6 	beq.w	80010fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb2:	4b8b      	ldr	r3, [pc, #556]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10d      	bne.n	8000fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a87      	ldr	r2, [pc, #540]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b85      	ldr	r3, [pc, #532]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fda:	4b82      	ldr	r3, [pc, #520]	; (80011e4 <HAL_RCC_OscConfig+0x4c8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d118      	bne.n	8001018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe6:	4b7f      	ldr	r3, [pc, #508]	; (80011e4 <HAL_RCC_OscConfig+0x4c8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a7e      	ldr	r2, [pc, #504]	; (80011e4 <HAL_RCC_OscConfig+0x4c8>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fba9 	bl	8000748 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ffa:	f7ff fba5 	bl	8000748 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e103      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	4b75      	ldr	r3, [pc, #468]	; (80011e4 <HAL_RCC_OscConfig+0x4c8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d106      	bne.n	800102e <HAL_RCC_OscConfig+0x312>
 8001020:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6213      	str	r3, [r2, #32]
 800102c:	e02d      	b.n	800108a <HAL_RCC_OscConfig+0x36e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x334>
 8001036:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a69      	ldr	r2, [pc, #420]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a66      	ldr	r2, [pc, #408]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6213      	str	r3, [r2, #32]
 800104e:	e01c      	b.n	800108a <HAL_RCC_OscConfig+0x36e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d10c      	bne.n	8001072 <HAL_RCC_OscConfig+0x356>
 8001058:	4b61      	ldr	r3, [pc, #388]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a60      	ldr	r2, [pc, #384]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	4b5e      	ldr	r3, [pc, #376]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6213      	str	r3, [r2, #32]
 8001070:	e00b      	b.n	800108a <HAL_RCC_OscConfig+0x36e>
 8001072:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a5a      	ldr	r2, [pc, #360]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	4b58      	ldr	r3, [pc, #352]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a57      	ldr	r2, [pc, #348]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d015      	beq.n	80010be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fb59 	bl	8000748 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109a:	f7ff fb55 	bl	8000748 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e0b1      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0ee      	beq.n	800109a <HAL_RCC_OscConfig+0x37e>
 80010bc:	e014      	b.n	80010e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010be:	f7ff fb43 	bl	8000748 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fb3f 	bl	8000748 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e09b      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ee      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d105      	bne.n	80010fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a3b      	ldr	r2, [pc, #236]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8087 	beq.w	8001212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d061      	beq.n	80011d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d146      	bne.n	80011a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_RCC_OscConfig+0x4cc>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fb13 	bl	8000748 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fb0f 	bl	8000748 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e06d      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d108      	bne.n	8001160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4921      	ldr	r1, [pc, #132]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a19      	ldr	r1, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	430b      	orrs	r3, r1
 8001172:	491b      	ldr	r1, [pc, #108]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_RCC_OscConfig+0x4cc>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fae3 	bl	8000748 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fadf 	bl	8000748 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e03d      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x46a>
 80011a4:	e035      	b.n	8001212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_RCC_OscConfig+0x4cc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff facc 	bl	8000748 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff fac8 	bl	8000748 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e026      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x498>
 80011d2:	e01e      	b.n	8001212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d107      	bne.n	80011ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e019      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40007000 	.word	0x40007000
 80011e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_OscConfig+0x500>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120a:	429a      	cmp	r2, r3
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0d0      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d910      	bls.n	8001264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 0207 	bic.w	r2, r3, #7
 800124a:	4965      	ldr	r1, [pc, #404]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001252:	4b63      	ldr	r3, [pc, #396]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d001      	beq.n	8001264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0b8      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800127c:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800129e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	494d      	ldr	r1, [pc, #308]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d040      	beq.n	8001340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d115      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e07f      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e073      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06b      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f023 0203 	bic.w	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4936      	ldr	r1, [pc, #216]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fa1a 	bl	8000748 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	e00a      	b.n	800132e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fa16 	bl	8000748 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e053      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 020c 	and.w	r2, r3, #12
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	429a      	cmp	r2, r3
 800133e:	d1eb      	bne.n	8001318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d210      	bcs.n	8001370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0207 	bic.w	r2, r3, #7
 8001356:	4922      	ldr	r1, [pc, #136]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e032      	b.n	80013d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4916      	ldr	r1, [pc, #88]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	490e      	ldr	r1, [pc, #56]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ae:	f000 f821 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	490a      	ldr	r1, [pc, #40]	; (80013e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013c0:	5ccb      	ldrb	r3, [r1, r3]
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_RCC_ClockConfig+0x1cc>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_ClockConfig+0x1d0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f978 	bl	80006c4 <HAL_InitTick>

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	08002330 	.word	0x08002330
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b490      	push	{r4, r7}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80013fc:	1d3c      	adds	r4, r7, #4
 80013fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001404:	f240 2301 	movw	r3, #513	; 0x201
 8001408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d002      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x40>
 800142e:	2b08      	cmp	r3, #8
 8001430:	d003      	beq.n	800143a <HAL_RCC_GetSysClockFreq+0x46>
 8001432:	e02b      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001436:	623b      	str	r3, [r7, #32]
      break;
 8001438:	e02b      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	0c9b      	lsrs	r3, r3, #18
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3328      	adds	r3, #40	; 0x28
 8001444:	443b      	add	r3, r7
 8001446:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800144a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d012      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0c5b      	lsrs	r3, r3, #17
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	3328      	adds	r3, #40	; 0x28
 8001462:	443b      	add	r3, r7
 8001464:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001468:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146e:	fb03 f202 	mul.w	r2, r3, r2
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	e004      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	623b      	str	r3, [r7, #32]
      break;
 800148a:	e002      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800148e:	623b      	str	r3, [r7, #32]
      break;
 8001490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001492:	6a3b      	ldr	r3, [r7, #32]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bc90      	pop	{r4, r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	08002320 	.word	0x08002320
 80014a4:	40021000 	.word	0x40021000
 80014a8:	007a1200 	.word	0x007a1200
 80014ac:	003d0900 	.word	0x003d0900

080014b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <RCC_Delay+0x34>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <RCC_Delay+0x38>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0a5b      	lsrs	r3, r3, #9
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014cc:	bf00      	nop
  }
  while (Delay --);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e5a      	subs	r2, r3, #1
 80014d2:	60fa      	str	r2, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f9      	bne.n	80014cc <RCC_Delay+0x1c>
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000000 	.word	0x20000000
 80014e8:	10624dd3 	.word	0x10624dd3

080014ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e041      	b.n	8001582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f839 	bl	800158a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3304      	adds	r3, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f000 fc02 	bl	8001d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d001      	beq.n	80015b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e035      	b.n	8001620 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a16      	ldr	r2, [pc, #88]	; (800162c <HAL_TIM_Base_Start_IT+0x90>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d009      	beq.n	80015ea <HAL_TIM_Base_Start_IT+0x4e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015de:	d004      	beq.n	80015ea <HAL_TIM_Base_Start_IT+0x4e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_TIM_Base_Start_IT+0x94>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d111      	bne.n	800160e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d010      	beq.n	800161e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800160c:	e007      	b.n	800161e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40012c00 	.word	0x40012c00
 8001630:	40000400 	.word	0x40000400

08001634 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e041      	b.n	80016ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7fe ff6a 	bl	8000534 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3304      	adds	r3, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f000 fb5e 	bl	8001d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e041      	b.n	800176a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f839 	bl	8001772 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f000 fb0e 	bl	8001d34 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0208 	bic.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001794:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800179c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80017ac:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d108      	bne.n	80017c6 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80017ba:	7b7b      	ldrb	r3, [r7, #13]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d102      	bne.n	80017c6 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80017c0:	7b3b      	ldrb	r3, [r7, #12]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d001      	beq.n	80017ca <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e02b      	b.n	8001822 <HAL_TIM_OnePulse_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fccd 	bl	8002192 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	2104      	movs	r1, #4
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fcc6 	bl	8002192 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_TIM_OnePulse_Start+0xa8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d107      	bne.n	8001820 <HAL_TIM_OnePulse_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40012c00 	.word	0x40012c00

08001830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d122      	bne.n	800188c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b02      	cmp	r3, #2
 8001852:	d11b      	bne.n	800188c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0202 	mvn.w	r2, #2
 800185c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fa4c 	bl	8001d10 <HAL_TIM_IC_CaptureCallback>
 8001878:	e005      	b.n	8001886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fa3f 	bl	8001cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa4e 	bl	8001d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b04      	cmp	r3, #4
 8001898:	d122      	bne.n	80018e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d11b      	bne.n	80018e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0204 	mvn.w	r2, #4
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fa22 	bl	8001d10 <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fa15 	bl	8001cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fa24 	bl	8001d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d122      	bne.n	8001934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d11b      	bne.n	8001934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f06f 0208 	mvn.w	r2, #8
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2204      	movs	r2, #4
 800190a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f9f8 	bl	8001d10 <HAL_TIM_IC_CaptureCallback>
 8001920:	e005      	b.n	800192e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f9eb 	bl	8001cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f9fa 	bl	8001d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b10      	cmp	r3, #16
 8001940:	d122      	bne.n	8001988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b10      	cmp	r3, #16
 800194e:	d11b      	bne.n	8001988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0210 	mvn.w	r2, #16
 8001958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2208      	movs	r2, #8
 800195e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9ce 	bl	8001d10 <HAL_TIM_IC_CaptureCallback>
 8001974:	e005      	b.n	8001982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f9c1 	bl	8001cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f9d0 	bl	8001d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0201 	mvn.w	r2, #1
 80019ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f99c 	bl	8001cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	2b80      	cmp	r3, #128	; 0x80
 80019c0:	d10e      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d107      	bne.n	80019e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fc5f 	bl	800229e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	2b40      	cmp	r3, #64	; 0x40
 80019ec:	d10e      	bne.n	8001a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d107      	bne.n	8001a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fd38 	bl	800047c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d10e      	bne.n	8001a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d107      	bne.n	8001a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0220 	mvn.w	r2, #32
 8001a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fc2a 	bl	800228c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e082      	b.n	8001b60 <HAL_TIM_IC_ConfigChannel+0x120>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11b      	bne.n	8001aa0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f000 fa84 	bl	8001f84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 020c 	bic.w	r2, r2, #12
 8001a8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6999      	ldr	r1, [r3, #24]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e05a      	b.n	8001b56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d11c      	bne.n	8001ae0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f000 fab9 	bl	800202c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ac8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6999      	ldr	r1, [r3, #24]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	021a      	lsls	r2, r3, #8
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	e03a      	b.n	8001b56 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11b      	bne.n	8001b1e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f000 fad5 	bl	80020a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 020c 	bic.w	r2, r2, #12
 8001b08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69d9      	ldr	r1, [r3, #28]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	61da      	str	r2, [r3, #28]
 8001b1c:	e01b      	b.n	8001b56 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f000 faf4 	bl	800211a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	; 0x30
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	f000 80b1 	beq.w	8001ce2 <HAL_TIM_OnePulse_ConfigChannel+0x17a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e0aa      	b.n	8001ce4 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_TIM_OnePulse_ConfigChannel+0x68>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d009      	beq.n	8001be2 <HAL_TIM_OnePulse_ConfigChannel+0x7a>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 8001bce:	e011      	b.n	8001bf4 <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f107 0214 	add.w	r2, r7, #20
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f902 	bl	8001de4 <TIM_OC1_SetConfig>
        break;
 8001be0:	e008      	b.n	8001bf4 <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f107 0214 	add.w	r2, r7, #20
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f95f 	bl	8001eb0 <TIM_OC2_SetConfig>
        break;
 8001bf2:	bf00      	nop
    }

    switch (InputChannel)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_OnePulse_ConfigChannel+0x9a>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d033      	beq.n	8001c68 <HAL_TIM_OnePulse_ConfigChannel+0x100>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 8001c00:	e065      	b.n	8001cce <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6999      	ldr	r1, [r3, #24]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f000 f9b7 	bl	8001f84 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020c 	bic.w	r2, r2, #12
 8001c24:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c34:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8001c44:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0207 	bic.w	r2, r2, #7
 8001c54:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0206 	orr.w	r2, r2, #6
 8001c64:	609a      	str	r2, [r3, #8]
        break;
 8001c66:	e032      	b.n	8001cce <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6999      	ldr	r1, [r3, #24]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f000 f9d8 	bl	800202c <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c8a:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c9a:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001caa:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0207 	bic.w	r2, r2, #7
 8001cba:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0206 	orr.w	r2, r2, #6
 8001cca:	609a      	str	r2, [r3, #8]
        break;
 8001ccc:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
  }
  else
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
  }
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <TIM_Base_SetConfig+0xa8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <TIM_Base_SetConfig+0x28>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0x28>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <TIM_Base_SetConfig+0xac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <TIM_Base_SetConfig+0xa8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x52>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x52>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <TIM_Base_SetConfig+0xac>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <TIM_Base_SetConfig+0xa8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d103      	bne.n	8001dcc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40000400 	.word	0x40000400

08001de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	f023 0201 	bic.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f023 0302 	bic.w	r3, r3, #2
 8001e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <TIM_OC1_SetConfig+0xc8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d10c      	bne.n	8001e5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 0308 	bic.w	r3, r3, #8
 8001e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <TIM_OC1_SetConfig+0xc8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d111      	bne.n	8001e86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	621a      	str	r2, [r3, #32]
}
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40012c00 	.word	0x40012c00

08001eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f023 0210 	bic.w	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 0320 	bic.w	r3, r3, #32
 8001efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <TIM_OC2_SetConfig+0xd0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d10d      	bne.n	8001f2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <TIM_OC2_SetConfig+0xd0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d113      	bne.n	8001f5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	621a      	str	r2, [r3, #32]
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f023 0201 	bic.w	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <TIM_TI1_SetConfig+0xa0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_TI1_SetConfig+0x3e>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb8:	d003      	beq.n	8001fc2 <TIM_TI1_SetConfig+0x3e>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <TIM_TI1_SetConfig+0xa4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <TIM_TI1_SetConfig+0x42>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <TIM_TI1_SetConfig+0x44>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e003      	b.n	8001fe6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f023 030a 	bic.w	r3, r3, #10
 8002000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f003 030a 	and.w	r3, r3, #10
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	621a      	str	r2, [r3, #32]
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40000400 	.word	0x40000400

0800202c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	f023 0210 	bic.w	r2, r3, #16
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800206a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	031b      	lsls	r3, r3, #12
 8002070:	b29b      	uxth	r3, r3
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800207e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	621a      	str	r2, [r3, #32]
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f023 0303 	bic.w	r3, r3, #3
 80020d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b087      	sub	sp, #28
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002146:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002158:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	b29b      	uxth	r3, r3
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800216c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	031b      	lsls	r3, r3, #12
 8002172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	621a      	str	r2, [r3, #32]
}
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2201      	movs	r2, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a1a      	ldr	r2, [r3, #32]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	621a      	str	r2, [r3, #32]
}
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e041      	b.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d009      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002240:	d004      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d10c      	bne.n	8002266 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4313      	orrs	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400

0800228c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <__libc_init_array>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	2600      	movs	r6, #0
 80022b4:	4d0c      	ldr	r5, [pc, #48]	; (80022e8 <__libc_init_array+0x38>)
 80022b6:	4c0d      	ldr	r4, [pc, #52]	; (80022ec <__libc_init_array+0x3c>)
 80022b8:	1b64      	subs	r4, r4, r5
 80022ba:	10a4      	asrs	r4, r4, #2
 80022bc:	42a6      	cmp	r6, r4
 80022be:	d109      	bne.n	80022d4 <__libc_init_array+0x24>
 80022c0:	f000 f822 	bl	8002308 <_init>
 80022c4:	2600      	movs	r6, #0
 80022c6:	4d0a      	ldr	r5, [pc, #40]	; (80022f0 <__libc_init_array+0x40>)
 80022c8:	4c0a      	ldr	r4, [pc, #40]	; (80022f4 <__libc_init_array+0x44>)
 80022ca:	1b64      	subs	r4, r4, r5
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	42a6      	cmp	r6, r4
 80022d0:	d105      	bne.n	80022de <__libc_init_array+0x2e>
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d8:	4798      	blx	r3
 80022da:	3601      	adds	r6, #1
 80022dc:	e7ee      	b.n	80022bc <__libc_init_array+0xc>
 80022de:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e2:	4798      	blx	r3
 80022e4:	3601      	adds	r6, #1
 80022e6:	e7f2      	b.n	80022ce <__libc_init_array+0x1e>
 80022e8:	08002340 	.word	0x08002340
 80022ec:	08002340 	.word	0x08002340
 80022f0:	08002340 	.word	0x08002340
 80022f4:	08002344 	.word	0x08002344

080022f8 <memset>:
 80022f8:	4603      	mov	r3, r0
 80022fa:	4402      	add	r2, r0
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d100      	bne.n	8002302 <memset+0xa>
 8002300:	4770      	bx	lr
 8002302:	f803 1b01 	strb.w	r1, [r3], #1
 8002306:	e7f9      	b.n	80022fc <memset+0x4>

08002308 <_init>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	bf00      	nop
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr

08002314 <_fini>:
 8002314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002316:	bf00      	nop
 8002318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231a:	bc08      	pop	{r3}
 800231c:	469e      	mov	lr, r3
 800231e:	4770      	bx	lr
