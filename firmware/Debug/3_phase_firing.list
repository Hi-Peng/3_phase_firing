
3_phase_firing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800255c  0800255c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800255c  0800255c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800255c  0800255c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002570  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002570  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000810d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001518  00000000  00000000  00028142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00029660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001619a  00000000  00000000  0002a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090ae  00000000  00000000  000409c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a1c  00000000  00000000  00049a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb48c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002600  00000000  00000000  000cb4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002524 	.word	0x08002524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002524 	.word	0x08002524

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fa9f 	bl	8000694 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f82a 	bl	80001ae <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f931 	bl	80003c0 <MX_GPIO_Init>
	MX_TIM1_Init();
 800015e:	f000 f86b 	bl	8000238 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// HAL_OP_Init();
	set_alpha(2500);
 8000162:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000166:	f000 f977 	bl	8000458 <set_alpha>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		for(int i = 0; i < 10000; i++){
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e008      	b.n	8000182 <main+0x36>
			set_alpha(i);
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f000 f971 	bl	8000458 <set_alpha>
			HAL_Delay(2);
 8000176:	2002      	movs	r0, #2
 8000178:	f000 faee 	bl	8000758 <HAL_Delay>
		for(int i = 0; i < 10000; i++){
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f242 720f 	movw	r2, #9999	; 0x270f
 8000188:	4293      	cmp	r3, r2
 800018a:	ddf1      	ble.n	8000170 <main+0x24>
		}

		for(int i = 10000; i > 0; i--){
 800018c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000190:	603b      	str	r3, [r7, #0]
 8000192:	e008      	b.n	80001a6 <main+0x5a>
			set_alpha(i);
 8000194:	6838      	ldr	r0, [r7, #0]
 8000196:	f000 f95f 	bl	8000458 <set_alpha>
			HAL_Delay(2);
 800019a:	2002      	movs	r0, #2
 800019c:	f000 fadc 	bl	8000758 <HAL_Delay>
		for(int i = 10000; i > 0; i--){
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	3b01      	subs	r3, #1
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	dcf3      	bgt.n	8000194 <main+0x48>
		for(int i = 0; i < 10000; i++){
 80001ac:	e7dd      	b.n	800016a <main+0x1e>

080001ae <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	b090      	sub	sp, #64	; 0x40
 80001b2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b4:	f107 0318 	add.w	r3, r7, #24
 80001b8:	2228      	movs	r2, #40	; 0x28
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 f9a9 	bl	8002514 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fd8e 	bl	8000d18 <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000202:	f000 f955 	bl	80004b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020a:	2302      	movs	r3, #2
 800020c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000216:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2101      	movs	r1, #1
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fffb 	bl	800121c <HAL_RCC_ClockConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x82>
	{
		Error_Handler();
 800022c:	f000 f940 	bl	80004b0 <Error_Handler>
	}
}
 8000230:	bf00      	nop
 8000232:	3740      	adds	r7, #64	; 0x40
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000256:	4b56      	ldr	r3, [pc, #344]	; (80003b0 <MX_TIM1_Init+0x178>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a55      	ldr	r2, [pc, #340]	; (80003b0 <MX_TIM1_Init+0x178>)
 800025c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b53      	ldr	r3, [pc, #332]	; (80003b0 <MX_TIM1_Init+0x178>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800026e:	4b51      	ldr	r3, [pc, #324]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000270:	4a51      	ldr	r2, [pc, #324]	; (80003b8 <MX_TIM1_Init+0x180>)
 8000272:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48-1;
 8000274:	4b4f      	ldr	r3, [pc, #316]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000276:	222f      	movs	r2, #47	; 0x2f
 8000278:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027a:	4b4e      	ldr	r3, [pc, #312]	; (80003b4 <MX_TIM1_Init+0x17c>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3000;
 8000280:	4b4c      	ldr	r3, [pc, #304]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000282:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000286:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000288:	4b4a      	ldr	r3, [pc, #296]	; (80003b4 <MX_TIM1_Init+0x17c>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800028e:	4b49      	ldr	r3, [pc, #292]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000290:	2200      	movs	r2, #0
 8000292:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000294:	4b47      	ldr	r3, [pc, #284]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800029a:	4846      	ldr	r0, [pc, #280]	; (80003b4 <MX_TIM1_Init+0x17c>)
 800029c:	f001 f9c8 	bl	8001630 <HAL_TIM_IC_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_TIM1_Init+0x72>
	{
		Error_Handler();
 80002a6:	f000 f903 	bl	80004b0 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80002aa:	2108      	movs	r1, #8
 80002ac:	4841      	ldr	r0, [pc, #260]	; (80003b4 <MX_TIM1_Init+0x17c>)
 80002ae:	f001 fb0d 	bl	80018cc <HAL_TIM_OnePulse_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM1_Init+0x84>
	{
		Error_Handler();
 80002b8:	f000 f8fa 	bl	80004b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4619      	mov	r1, r3
 80002ca:	483a      	ldr	r0, [pc, #232]	; (80003b4 <MX_TIM1_Init+0x17c>)
 80002cc:	f002 f894 	bl	80023f8 <HAL_TIMEx_MasterConfigSynchronization>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM1_Init+0xa2>
	{
		Error_Handler();
 80002d6:	f000 f8eb 	bl	80004b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80002da:	2300      	movs	r3, #0
 80002dc:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80002de:	2301      	movs	r3, #1
 80002e0:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
	sConfigIC.ICFilter = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2204      	movs	r2, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4830      	ldr	r0, [pc, #192]	; (80003b4 <MX_TIM1_Init+0x17c>)
 80002f4:	f001 fcb2 	bl	8001c5c <HAL_TIM_IC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80002fe:	f000 f8d7 	bl	80004b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */
	if(HAL_TIM_Base_Init(&htim1) != HAL_OK){
 8000302:	482c      	ldr	r0, [pc, #176]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000304:	f001 f8f0 	bl	80014e8 <HAL_TIM_Base_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM1_Init+0xda>
		Error_Handler();
 800030e:	f000 f8cf 	bl	80004b0 <Error_Handler>
	}

	if(HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK){
 8000312:	2104      	movs	r1, #4
 8000314:	4827      	ldr	r0, [pc, #156]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000316:	f001 f9db 	bl	80016d0 <HAL_TIM_IC_Start_IT>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM1_Init+0xec>
		Error_Handler();
 8000320:	f000 f8c6 	bl	80004b0 <Error_Handler>
	}

	if(HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK){
 8000324:	2108      	movs	r1, #8
 8000326:	4823      	ldr	r0, [pc, #140]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000328:	f001 fad0 	bl	80018cc <HAL_TIM_OnePulse_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM1_Init+0xfe>
		Error_Handler();
 8000332:	f000 f8bd 	bl	80004b0 <Error_Handler>
	}

	OPConfig.OCMode = TIM_OCMODE_PWM2;
 8000336:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_TIM1_Init+0x184>)
 8000338:	2270      	movs	r2, #112	; 0x70
 800033a:	601a      	str	r2, [r3, #0]
	OPConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_TIM1_Init+0x184>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
	OPConfig.Pulse        = 1000;
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_TIM1_Init+0x184>)
 8000344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000348:	605a      	str	r2, [r3, #4]
	OPConfig.ICPolarity   = TIM_ICPOLARITY_RISING;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_TIM1_Init+0x184>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
	OPConfig.ICSelection  = TIM_ICSELECTION_DIRECTTI;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM1_Init+0x184>)
 8000352:	2201      	movs	r2, #1
 8000354:	61da      	str	r2, [r3, #28]
	OPConfig.ICFilter     = 0;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_TIM1_Init+0x184>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
	OPConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_TIM1_Init+0x184>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
	OPConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_TIM1_Init+0x184>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
	OPConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_TIM1_Init+0x184>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]

	if(HAL_TIM_OnePulse_ConfigChannel(&htim1, &OPConfig, TIM_CHANNEL_1, TIM_CHANNEL_2) != HAL_OK){
 800036e:	2304      	movs	r3, #4
 8000370:	2200      	movs	r2, #0
 8000372:	4912      	ldr	r1, [pc, #72]	; (80003bc <MX_TIM1_Init+0x184>)
 8000374:	480f      	ldr	r0, [pc, #60]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000376:	f001 fd05 	bl	8001d84 <HAL_TIM_OnePulse_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM1_Init+0x14c>
		Error_Handler();
 8000380:	f000 f896 	bl	80004b0 <Error_Handler>
	}

	if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000386:	f001 f907 	bl	8001598 <HAL_TIM_Base_Start_IT>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM1_Init+0x15c>
		Error_Handler();
 8000390:	f000 f88e 	bl	80004b0 <Error_Handler>
	}

	if(HAL_TIM_OnePulse_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK){
 8000394:	2100      	movs	r1, #0
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <MX_TIM1_Init+0x17c>)
 8000398:	f001 faf2 	bl	8001980 <HAL_TIM_OnePulse_Start_IT>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0x16e>
		Error_Handler();
 80003a2:	f000 f885 	bl	80004b0 <Error_Handler>
	}
	/* USER CODE END TIM1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	3720      	adds	r7, #32
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	20000028 	.word	0x20000028
 80003b8:	40012c00 	.word	0x40012c00
 80003bc:	20000074 	.word	0x20000074

080003c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_GPIO_Init+0x90>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <MX_GPIO_Init+0x90>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_GPIO_Init+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <MX_GPIO_Init+0x90>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_GPIO_Init+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000422:	480c      	ldr	r0, [pc, #48]	; (8000454 <MX_GPIO_Init+0x94>)
 8000424:	f000 fc46 	bl	8000cb4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2302      	movs	r3, #2
 8000438:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_GPIO_Init+0x94>)
 8000442:	f000 fabb 	bl	80009bc <HAL_GPIO_Init>

}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40011000 	.word	0x40011000

08000458 <set_alpha>:

/* USER CODE BEGIN 4 */
/*
 * @brief Inisialisasi timer 1 untuk One Pulse mode pada channel 1
 */
void set_alpha(int alpha){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <set_alpha+0x34>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(&htim1, (alpha+SCR_PULSE_WIDTH));
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <set_alpha+0x34>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	62da      	str	r2, [r3, #44]	; 0x2c
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800047a:	461a      	mov	r2, r3
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <set_alpha+0x34>)
 800047e:	60da      	str	r2, [r3, #12]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000028 	.word	0x20000028

08000490 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
		global_pulse_flag++;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <HAL_TIM_IC_CaptureCallback+0x1c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a03      	ldr	r2, [pc, #12]	; (80004ac <HAL_TIM_IC_CaptureCallback+0x1c>)
 80004a0:	6013      	str	r3, [r2, #0]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	20000070 	.word	0x20000070

080004b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	while(1){
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80004b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <Error_Handler+0x18>)
 80004ba:	f000 fc13 	bl	8000ce4 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80004be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c2:	f000 f949 	bl	8000758 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 80004c6:	e7f5      	b.n	80004b4 <Error_Handler+0x4>
 80004c8:	40011000 	.word	0x40011000

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <HAL_TIM_IC_MspInit+0x9c>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d139      	bne.n	80005c4 <HAL_TIM_IC_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <HAL_TIM_IC_MspInit+0xa0>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <HAL_TIM_IC_MspInit+0xa0>)
 8000556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_TIM_IC_MspInit+0xa0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_TIM_IC_MspInit+0xa0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_TIM_IC_MspInit+0xa0>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <HAL_TIM_IC_MspInit+0xa0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000586:	2302      	movs	r3, #2
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <HAL_TIM_IC_MspInit+0xa4>)
 8000596:	f000 fa11 	bl	80009bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800059a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <HAL_TIM_IC_MspInit+0xa4>)
 80005b0:	f000 fa04 	bl	80009bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	201a      	movs	r0, #26
 80005ba:	f000 f9c8 	bl	800094e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80005be:	201a      	movs	r0, #26
 80005c0:	f000 f9e1 	bl	8000986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40012c00 	.word	0x40012c00
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <NMI_Handler+0x4>

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>

080005ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061e:	f000 f87f 	bl	8000720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM1_TRG_COM_IRQHandler+0x10>)
 800062e:	f001 fa0d 	bl	8001a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028

0800063c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	; (8000680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	; (800068c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066e:	f7ff ffe5 	bl	800063c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000672:	f001 ff2b 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff fd69 	bl	800014c <main>
  bx lr
 800067a:	4770      	bx	lr
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000684:	08002564 	.word	0x08002564
  ldr r2, =_sbss
 8000688:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800068c:	2000009c 	.word	0x2000009c

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_Init+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_Init+0x28>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f947 	bl	8000938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff ff0c 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f95f 	bl	80009a2 <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006fc:	f000 f927 	bl	800094e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x1c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_IncTick+0x20>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a03      	ldr	r2, [pc, #12]	; (8000740 <HAL_IncTick+0x20>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	20000008 	.word	0x20000008
 8000740:	20000098 	.word	0x20000098

08000744 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <HAL_GetTick+0x10>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000098 	.word	0x20000098

08000758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff fff0 	bl	8000744 <HAL_GetTick>
 8000764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000770:	d005      	beq.n	800077e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_Delay+0x44>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077e:	bf00      	nop
 8000780:	f7ff ffe0 	bl	8000744 <HAL_GetTick>
 8000784:	4602      	mov	r2, r0
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	429a      	cmp	r2, r3
 800078e:	d8f7      	bhi.n	8000780 <HAL_Delay+0x28>
  {
  }
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000904:	d301      	bcc.n	800090a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000906:	2301      	movs	r3, #1
 8000908:	e00f      	b.n	800092a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <SysTick_Config+0x40>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000912:	210f      	movs	r1, #15
 8000914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000918:	f7ff ff90 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <SysTick_Config+0x40>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SysTick_Config+0x40>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	e000e010 	.word	0xe000e010

08000938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff ff2d 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000960:	f7ff ff42 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68b9      	ldr	r1, [r7, #8]
 800096a:	6978      	ldr	r0, [r7, #20]
 800096c:	f7ff ff90 	bl	8000890 <NVIC_EncodePriority>
 8000970:	4602      	mov	r2, r0
 8000972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff5f 	bl	800083c <__NVIC_SetPriority>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff35 	bl	8000804 <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffa2 	bl	80008f4 <SysTick_Config>
 80009b0:	4603      	mov	r3, r0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e161      	b.n	8000c94 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d0:	2201      	movs	r2, #1
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	f040 8150 	bne.w	8000c8e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4a97      	ldr	r2, [pc, #604]	; (8000c50 <HAL_GPIO_Init+0x294>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d05e      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 80009f8:	4a95      	ldr	r2, [pc, #596]	; (8000c50 <HAL_GPIO_Init+0x294>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d875      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 80009fe:	4a95      	ldr	r2, [pc, #596]	; (8000c54 <HAL_GPIO_Init+0x298>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d058      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a04:	4a93      	ldr	r2, [pc, #588]	; (8000c54 <HAL_GPIO_Init+0x298>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d86f      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a0a:	4a93      	ldr	r2, [pc, #588]	; (8000c58 <HAL_GPIO_Init+0x29c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d052      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a10:	4a91      	ldr	r2, [pc, #580]	; (8000c58 <HAL_GPIO_Init+0x29c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d869      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a16:	4a91      	ldr	r2, [pc, #580]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d04c      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a8f      	ldr	r2, [pc, #572]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d863      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a22:	4a8f      	ldr	r2, [pc, #572]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d046      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a8d      	ldr	r2, [pc, #564]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d85d      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d82a      	bhi.n	8000a88 <HAL_GPIO_Init+0xcc>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d859      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <HAL_GPIO_Init+0x80>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000a91 	.word	0x08000a91
 8000a44:	08000aa3 	.word	0x08000aa3
 8000a48:	08000ae5 	.word	0x08000ae5
 8000a4c:	08000aeb 	.word	0x08000aeb
 8000a50:	08000aeb 	.word	0x08000aeb
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000aeb 	.word	0x08000aeb
 8000a5c:	08000aeb 	.word	0x08000aeb
 8000a60:	08000aeb 	.word	0x08000aeb
 8000a64:	08000aeb 	.word	0x08000aeb
 8000a68:	08000aeb 	.word	0x08000aeb
 8000a6c:	08000aeb 	.word	0x08000aeb
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000aeb 	.word	0x08000aeb
 8000a78:	08000aeb 	.word	0x08000aeb
 8000a7c:	08000aeb 	.word	0x08000aeb
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	4a76      	ldr	r2, [pc, #472]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e02c      	b.n	8000aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e029      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e024      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e01f      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e01a      	b.n	8000aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e013      	b.n	8000aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d105      	bne.n	8000ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000acc:	2308      	movs	r3, #8
 8000ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	611a      	str	r2, [r3, #16]
          break;
 8000ad6:	e009      	b.n	8000aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	615a      	str	r2, [r3, #20]
          break;
 8000ae2:	e003      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
          break;
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x130>
          break;
 8000aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d801      	bhi.n	8000af6 <HAL_GPIO_Init+0x13a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e001      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3304      	adds	r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d802      	bhi.n	8000b08 <HAL_GPIO_Init+0x14c>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0x152>
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	3b08      	subs	r3, #8
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	210f      	movs	r1, #15
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6a39      	ldr	r1, [r7, #32]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80a9 	beq.w	8000c8e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3c:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a49      	ldr	r2, [pc, #292]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b54:	4a45      	ldr	r2, [pc, #276]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a3d      	ldr	r2, [pc, #244]	; (8000c70 <HAL_GPIO_Init+0x2b4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00d      	beq.n	8000b9c <HAL_GPIO_Init+0x1e0>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3c      	ldr	r2, [pc, #240]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d007      	beq.n	8000b98 <HAL_GPIO_Init+0x1dc>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <HAL_GPIO_Init+0x1d8>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e004      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <HAL_GPIO_Init+0x1e2>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4093      	lsls	r3, r2
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bae:	492f      	ldr	r1, [pc, #188]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	492b      	ldr	r1, [pc, #172]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4927      	ldr	r1, [pc, #156]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4921      	ldr	r1, [pc, #132]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	491d      	ldr	r1, [pc, #116]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	4917      	ldr	r1, [pc, #92]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	608b      	str	r3, [r1, #8]
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4913      	ldr	r1, [pc, #76]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d01f      	beq.n	8000c80 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	490d      	ldr	r1, [pc, #52]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60cb      	str	r3, [r1, #12]
 8000c4c:	e01f      	b.n	8000c8e <HAL_GPIO_Init+0x2d2>
 8000c4e:	bf00      	nop
 8000c50:	10320000 	.word	0x10320000
 8000c54:	10310000 	.word	0x10310000
 8000c58:	10220000 	.word	0x10220000
 8000c5c:	10210000 	.word	0x10210000
 8000c60:	10120000 	.word	0x10120000
 8000c64:	10110000 	.word	0x10110000
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	40010800 	.word	0x40010800
 8000c74:	40010c00 	.word	0x40010c00
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_GPIO_Init+0x2f4>)
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4909      	ldr	r1, [pc, #36]	; (8000cb0 <HAL_GPIO_Init+0x2f4>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	3301      	adds	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f47f ae96 	bne.w	80009d0 <HAL_GPIO_Init+0x14>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	372c      	adds	r7, #44	; 0x2c
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc4:	787b      	ldrb	r3, [r7, #1]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cca:	887a      	ldrh	r2, [r7, #2]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cd0:	e003      	b.n	8000cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	041a      	lsls	r2, r3, #16
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	611a      	str	r2, [r3, #16]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	041a      	lsls	r2, r3, #16
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	43d9      	mvns	r1, r3
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	400b      	ands	r3, r1
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	611a      	str	r2, [r3, #16]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e272      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8087 	beq.w	8000e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d38:	4b92      	ldr	r3, [pc, #584]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d00c      	beq.n	8000d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d44:	4b8f      	ldr	r3, [pc, #572]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d112      	bne.n	8000d76 <HAL_RCC_OscConfig+0x5e>
 8000d50:	4b8c      	ldr	r3, [pc, #560]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5c:	d10b      	bne.n	8000d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	4b89      	ldr	r3, [pc, #548]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d06c      	beq.n	8000e44 <HAL_RCC_OscConfig+0x12c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d168      	bne.n	8000e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e24c      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7e:	d106      	bne.n	8000d8e <HAL_RCC_OscConfig+0x76>
 8000d80:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a7f      	ldr	r2, [pc, #508]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e02e      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x98>
 8000d96:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a7a      	ldr	r2, [pc, #488]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b78      	ldr	r3, [pc, #480]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a77      	ldr	r2, [pc, #476]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e01d      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xbc>
 8000dba:	4b72      	ldr	r3, [pc, #456]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a71      	ldr	r2, [pc, #452]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6e      	ldr	r2, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e00b      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000dd4:	4b6b      	ldr	r3, [pc, #428]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a6a      	ldr	r2, [pc, #424]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b68      	ldr	r3, [pc, #416]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a67      	ldr	r2, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d013      	beq.n	8000e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fca6 	bl	8000744 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fca2 	bl	8000744 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	; 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e200      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b5d      	ldr	r3, [pc, #372]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0xe4>
 8000e1a:	e014      	b.n	8000e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc92 	bl	8000744 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fc8e 	bl	8000744 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e1ec      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x10c>
 8000e42:	e000      	b.n	8000e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d063      	beq.n	8000f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5e:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d11c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x18c>
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e1c0      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4939      	ldr	r1, [pc, #228]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	e03a      	b.n	8000f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d020      	beq.n	8000eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fc47 	bl	8000744 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc43 	bl	8000744 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e1a1      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4927      	ldr	r1, [pc, #156]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc26 	bl	8000744 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efc:	f7ff fc22 	bl	8000744 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e180      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d03a      	beq.n	8000f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d019      	beq.n	8000f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fc06 	bl	8000744 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc02 	bl	8000744 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e160      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 faa6 	bl	80014ac <RCC_Delay>
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fbec 	bl	8000744 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6e:	e00f      	b.n	8000f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fbe8 	bl	8000744 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d908      	bls.n	8000f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e146      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	42420000 	.word	0x42420000
 8000f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f90:	4b92      	ldr	r3, [pc, #584]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e9      	bne.n	8000f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a6 	beq.w	80010f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fae:	4b8b      	ldr	r3, [pc, #556]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b88      	ldr	r3, [pc, #544]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a87      	ldr	r2, [pc, #540]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b85      	ldr	r3, [pc, #532]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd6:	4b82      	ldr	r3, [pc, #520]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d118      	bne.n	8001014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7e      	ldr	r2, [pc, #504]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fba9 	bl	8000744 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff6:	f7ff fba5 	bl	8000744 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e103      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x312>
 800101c:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a6e      	ldr	r2, [pc, #440]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e02d      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x334>
 8001032:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0304 	bic.w	r3, r3, #4
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	e01c      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d10c      	bne.n	800106e <HAL_RCC_OscConfig+0x356>
 8001054:	4b61      	ldr	r3, [pc, #388]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a5d      	ldr	r2, [pc, #372]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800106e:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a5a      	ldr	r2, [pc, #360]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a57      	ldr	r2, [pc, #348]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb59 	bl	8000744 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fb55 	bl	8000744 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0b1      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ee      	beq.n	8001096 <HAL_RCC_OscConfig+0x37e>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb43 	bl	8000744 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fb3f 	bl	8000744 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e09b      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a3b      	ldr	r2, [pc, #236]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8087 	beq.w	800120e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d061      	beq.n	80011d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d146      	bne.n	80011a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fb13 	bl	8000744 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff fb0f 	bl	8000744 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e06d      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001148:	d108      	bne.n	800115c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4921      	ldr	r1, [pc, #132]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a19      	ldr	r1, [r3, #32]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	430b      	orrs	r3, r1
 800116e:	491b      	ldr	r1, [pc, #108]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fae3 	bl	8000744 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff fadf 	bl	8000744 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e03d      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x46a>
 80011a0:	e035      	b.n	800120e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff facc 	bl	8000744 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fac8 	bl	8000744 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e026      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x498>
 80011ce:	e01e      	b.n	800120e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e019      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40007000 	.word	0x40007000
 80011e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_OscConfig+0x500>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0d0      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d910      	bls.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0207 	bic.w	r2, r3, #7
 8001246:	4965      	ldr	r1, [pc, #404]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0b8      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800129a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	494d      	ldr	r1, [pc, #308]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d040      	beq.n	800133c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e07f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e073      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06b      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 0203 	bic.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4936      	ldr	r1, [pc, #216]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130c:	f7ff fa1a 	bl	8000744 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	e00a      	b.n	800132a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7ff fa16 	bl	8000744 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e053      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 020c 	and.w	r2, r3, #12
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d1eb      	bne.n	8001314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d210      	bcs.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4922      	ldr	r1, [pc, #136]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e032      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4916      	ldr	r1, [pc, #88]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013aa:	f000 f821 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	490a      	ldr	r1, [pc, #40]	; (80013e4 <HAL_RCC_ClockConfig+0x1c8>)
 80013bc:	5ccb      	ldrb	r3, [r1, r3]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1cc>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_ClockConfig+0x1d0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f978 	bl	80006c0 <HAL_InitTick>

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	0800254c 	.word	0x0800254c
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	b490      	push	{r4, r7}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_RCC_GetSysClockFreq+0xac>)
 80013f8:	1d3c      	adds	r4, r7, #4
 80013fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001400:	f240 2301 	movw	r3, #513	; 0x201
 8001404:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b04      	cmp	r3, #4
 8001428:	d002      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x40>
 800142a:	2b08      	cmp	r3, #8
 800142c:	d003      	beq.n	8001436 <HAL_RCC_GetSysClockFreq+0x46>
 800142e:	e02b      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001432:	623b      	str	r3, [r7, #32]
      break;
 8001434:	e02b      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3328      	adds	r3, #40	; 0x28
 8001440:	443b      	add	r3, r7
 8001442:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001446:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d012      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0c5b      	lsrs	r3, r3, #17
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	3328      	adds	r3, #40	; 0x28
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146a:	fb03 f202 	mul.w	r2, r3, r2
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	e004      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	623b      	str	r3, [r7, #32]
      break;
 8001486:	e002      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800148a:	623b      	str	r3, [r7, #32]
      break;
 800148c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148e:	6a3b      	ldr	r3, [r7, #32]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bc90      	pop	{r4, r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	0800253c 	.word	0x0800253c
 80014a0:	40021000 	.word	0x40021000
 80014a4:	007a1200 	.word	0x007a1200
 80014a8:	003d0900 	.word	0x003d0900

080014ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <RCC_Delay+0x34>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <RCC_Delay+0x38>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a5b      	lsrs	r3, r3, #9
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c8:	bf00      	nop
  }
  while (Delay --);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f9      	bne.n	80014c8 <RCC_Delay+0x1c>
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000000 	.word	0x20000000
 80014e4:	10624dd3 	.word	0x10624dd3

080014e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e041      	b.n	800157e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f839 	bl	8001586 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3304      	adds	r3, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f000 fd12 	bl	8001f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d001      	beq.n	80015b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e035      	b.n	800161c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a16      	ldr	r2, [pc, #88]	; (8001628 <HAL_TIM_Base_Start_IT+0x90>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d009      	beq.n	80015e6 <HAL_TIM_Base_Start_IT+0x4e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015da:	d004      	beq.n	80015e6 <HAL_TIM_Base_Start_IT+0x4e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <HAL_TIM_Base_Start_IT+0x94>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d111      	bne.n	800160a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	d010      	beq.n	800161a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001608:	e007      	b.n	800161a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40012c00 	.word	0x40012c00
 800162c:	40000400 	.word	0x40000400

08001630 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e041      	b.n	80016c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7fe ff6a 	bl	8000530 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3304      	adds	r3, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f000 fc6e 	bl	8001f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d104      	bne.n	80016ea <HAL_TIM_IC_Start_IT+0x1a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	e013      	b.n	8001712 <HAL_TIM_IC_Start_IT+0x42>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d104      	bne.n	80016fa <HAL_TIM_IC_Start_IT+0x2a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	e00b      	b.n	8001712 <HAL_TIM_IC_Start_IT+0x42>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d104      	bne.n	800170a <HAL_TIM_IC_Start_IT+0x3a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001706:	b2db      	uxtb	r3, r3
 8001708:	e003      	b.n	8001712 <HAL_TIM_IC_Start_IT+0x42>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001710:	b2db      	uxtb	r3, r3
 8001712:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d104      	bne.n	8001724 <HAL_TIM_IC_Start_IT+0x54>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e013      	b.n	800174c <HAL_TIM_IC_Start_IT+0x7c>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2b04      	cmp	r3, #4
 8001728:	d104      	bne.n	8001734 <HAL_TIM_IC_Start_IT+0x64>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e00b      	b.n	800174c <HAL_TIM_IC_Start_IT+0x7c>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d104      	bne.n	8001744 <HAL_TIM_IC_Start_IT+0x74>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e003      	b.n	800174c <HAL_TIM_IC_Start_IT+0x7c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800174a:	b2db      	uxtb	r3, r3
 800174c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0ae      	b.n	80018bc <HAL_TIM_IC_Start_IT+0x1ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d104      	bne.n	800176e <HAL_TIM_IC_Start_IT+0x9e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800176c:	e013      	b.n	8001796 <HAL_TIM_IC_Start_IT+0xc6>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d104      	bne.n	800177e <HAL_TIM_IC_Start_IT+0xae>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800177c:	e00b      	b.n	8001796 <HAL_TIM_IC_Start_IT+0xc6>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d104      	bne.n	800178e <HAL_TIM_IC_Start_IT+0xbe>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800178c:	e003      	b.n	8001796 <HAL_TIM_IC_Start_IT+0xc6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d104      	bne.n	80017a6 <HAL_TIM_IC_Start_IT+0xd6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017a4:	e013      	b.n	80017ce <HAL_TIM_IC_Start_IT+0xfe>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d104      	bne.n	80017b6 <HAL_TIM_IC_Start_IT+0xe6>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017b4:	e00b      	b.n	80017ce <HAL_TIM_IC_Start_IT+0xfe>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d104      	bne.n	80017c6 <HAL_TIM_IC_Start_IT+0xf6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017c4:	e003      	b.n	80017ce <HAL_TIM_IC_Start_IT+0xfe>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d841      	bhi.n	8001858 <HAL_TIM_IC_Start_IT+0x188>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_TIM_IC_Start_IT+0x10c>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	08001811 	.word	0x08001811
 80017e0:	08001859 	.word	0x08001859
 80017e4:	08001859 	.word	0x08001859
 80017e8:	08001859 	.word	0x08001859
 80017ec:	08001823 	.word	0x08001823
 80017f0:	08001859 	.word	0x08001859
 80017f4:	08001859 	.word	0x08001859
 80017f8:	08001859 	.word	0x08001859
 80017fc:	08001835 	.word	0x08001835
 8001800:	08001859 	.word	0x08001859
 8001804:	08001859 	.word	0x08001859
 8001808:	08001859 	.word	0x08001859
 800180c:	08001847 	.word	0x08001847
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0202 	orr.w	r2, r2, #2
 800181e:	60da      	str	r2, [r3, #12]
      break;
 8001820:	e01b      	b.n	800185a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0204 	orr.w	r2, r2, #4
 8001830:	60da      	str	r2, [r3, #12]
      break;
 8001832:	e012      	b.n	800185a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0208 	orr.w	r2, r2, #8
 8001842:	60da      	str	r2, [r3, #12]
      break;
 8001844:	e009      	b.n	800185a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0210 	orr.w	r2, r2, #16
 8001854:	60da      	str	r2, [r3, #12]
      break;
 8001856:	e000      	b.n	800185a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001858:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fda3 	bl	80023ae <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <HAL_TIM_IC_Start_IT+0x1f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d009      	beq.n	8001886 <HAL_TIM_IC_Start_IT+0x1b6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187a:	d004      	beq.n	8001886 <HAL_TIM_IC_Start_IT+0x1b6>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_TIM_IC_Start_IT+0x1f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d111      	bne.n	80018aa <HAL_TIM_IC_Start_IT+0x1da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b06      	cmp	r3, #6
 8001896:	d010      	beq.n	80018ba <HAL_TIM_IC_Start_IT+0x1ea>
    {
      __HAL_TIM_ENABLE(htim);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a8:	e007      	b.n	80018ba <HAL_TIM_IC_Start_IT+0x1ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40000400 	.word	0x40000400

080018cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e041      	b.n	8001964 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f839 	bl	800196c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2202      	movs	r2, #2
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f000 fb1f 	bl	8001f50 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0208 	bic.w	r2, r2, #8
 8001920:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
	...

08001980 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80019a8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80019b0:	7bbb      	ldrb	r3, [r7, #14]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d102      	bne.n	80019c2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80019bc:	7b3b      	ldrb	r3, [r7, #12]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e03b      	b.n	8001a3e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0202 	orr.w	r2, r2, #2
 80019f4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0204 	orr.w	r2, r2, #4
 8001a04:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fccd 	bl	80023ae <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fcc6 	bl	80023ae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d107      	bne.n	8001a3c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012c00 	.word	0x40012c00

08001a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d122      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d11b      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0202 	mvn.w	r2, #2
 8001a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fcfe 	bl	8000490 <HAL_TIM_IC_CaptureCallback>
 8001a94:	e005      	b.n	8001aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fa3f 	bl	8001f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fa45 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d122      	bne.n	8001afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d11b      	bne.n	8001afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0204 	mvn.w	r2, #4
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fcd4 	bl	8000490 <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fa15 	bl	8001f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fa1b 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d122      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d11b      	bne.n	8001b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0208 	mvn.w	r2, #8
 8001b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2204      	movs	r2, #4
 8001b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fcaa 	bl	8000490 <HAL_TIM_IC_CaptureCallback>
 8001b3c:	e005      	b.n	8001b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f9eb 	bl	8001f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f9f1 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d122      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0210 	mvn.w	r2, #16
 8001b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7fe fc80 	bl	8000490 <HAL_TIM_IC_CaptureCallback>
 8001b90:	e005      	b.n	8001b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f9c1 	bl	8001f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f9c7 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0201 	mvn.w	r2, #1
 8001bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f99c 	bl	8001f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	2b80      	cmp	r3, #128	; 0x80
 8001bdc:	d10e      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d107      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fc5f 	bl	80024ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	d10e      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d107      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f98b 	bl	8001f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0220 	mvn.w	r2, #32
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fc2a 	bl	80024a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e082      	b.n	8001d7c <HAL_TIM_IC_ConfigChannel+0x120>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11b      	bne.n	8001cbc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f000 fa84 	bl	80021a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 020c 	bic.w	r2, r2, #12
 8001ca6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6999      	ldr	r1, [r3, #24]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e05a      	b.n	8001d72 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d11c      	bne.n	8001cfc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	6819      	ldr	r1, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f000 fab9 	bl	8002248 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ce4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6999      	ldr	r1, [r3, #24]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	021a      	lsls	r2, r3, #8
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	e03a      	b.n	8001d72 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d11b      	bne.n	8001d3a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f000 fad5 	bl	80022c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 020c 	bic.w	r2, r2, #12
 8001d24:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]
 8001d38:	e01b      	b.n	8001d72 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f000 faf4 	bl	8002336 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69d9      	ldr	r1, [r3, #28]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	021a      	lsls	r2, r3, #8
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	f000 80b1 	beq.w	8001efe <HAL_TIM_OnePulse_ConfigChannel+0x17a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0aa      	b.n	8001f00 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_TIM_OnePulse_ConfigChannel+0x68>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d009      	beq.n	8001dfe <HAL_TIM_OnePulse_ConfigChannel+0x7a>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 8001dea:	e011      	b.n	8001e10 <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f107 0214 	add.w	r2, r7, #20
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f902 	bl	8002000 <TIM_OC1_SetConfig>
        break;
 8001dfc:	e008      	b.n	8001e10 <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f107 0214 	add.w	r2, r7, #20
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 f95f 	bl	80020cc <TIM_OC2_SetConfig>
        break;
 8001e0e:	bf00      	nop
    }

    switch (InputChannel)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_OnePulse_ConfigChannel+0x9a>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d033      	beq.n	8001e84 <HAL_TIM_OnePulse_ConfigChannel+0x100>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 8001e1c:	e065      	b.n	8001eea <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6999      	ldr	r1, [r3, #24]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f000 f9b7 	bl	80021a0 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 020c 	bic.w	r2, r2, #12
 8001e40:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e50:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8001e60:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0207 	bic.w	r2, r2, #7
 8001e70:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0206 	orr.w	r2, r2, #6
 8001e80:	609a      	str	r2, [r3, #8]
        break;
 8001e82:	e032      	b.n	8001eea <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	6999      	ldr	r1, [r3, #24]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f000 f9d8 	bl	8002248 <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001ea6:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001eb6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001ec6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0207 	bic.w	r2, r2, #7
 8001ed6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0206 	orr.w	r2, r2, #6
 8001ee6:	609a      	str	r2, [r3, #8]
        break;
 8001ee8:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
  }
  else
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <TIM_Base_SetConfig+0xa8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <TIM_Base_SetConfig+0x28>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6e:	d003      	beq.n	8001f78 <TIM_Base_SetConfig+0x28>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <TIM_Base_SetConfig+0xac>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <TIM_Base_SetConfig+0xa8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0x52>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x52>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <TIM_Base_SetConfig+0xac>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d108      	bne.n	8001fb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <TIM_Base_SetConfig+0xa8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d103      	bne.n	8001fe8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	615a      	str	r2, [r3, #20]
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40000400 	.word	0x40000400

08002000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f023 0201 	bic.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f023 0302 	bic.w	r3, r3, #2
 8002048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <TIM_OC1_SetConfig+0xc8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d10c      	bne.n	8002076 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0308 	bic.w	r3, r3, #8
 8002062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <TIM_OC1_SetConfig+0xc8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d111      	bne.n	80020a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800208c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	621a      	str	r2, [r3, #32]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00

080020cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f023 0210 	bic.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0320 	bic.w	r3, r3, #32
 8002116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <TIM_OC2_SetConfig+0xd0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d10d      	bne.n	8002148 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <TIM_OC2_SetConfig+0xd0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d113      	bne.n	8002178 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800215e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	621a      	str	r2, [r3, #32]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012c00 	.word	0x40012c00

080021a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0201 	bic.w	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <TIM_TI1_SetConfig+0xa0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_TI1_SetConfig+0x3e>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d4:	d003      	beq.n	80021de <TIM_TI1_SetConfig+0x3e>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <TIM_TI1_SetConfig+0xa4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <TIM_TI1_SetConfig+0x42>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <TIM_TI1_SetConfig+0x44>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e003      	b.n	8002202 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	b2db      	uxtb	r3, r3
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f023 030a 	bic.w	r3, r3, #10
 800221c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f003 030a 	and.w	r3, r3, #10
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	621a      	str	r2, [r3, #32]
}
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40000400 	.word	0x40000400

08002248 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	f023 0210 	bic.w	r2, r3, #16
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002286:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	031b      	lsls	r3, r3, #12
 800228c:	b29b      	uxth	r3, r3
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800229a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	621a      	str	r2, [r3, #32]
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f023 0303 	bic.w	r3, r3, #3
 80022ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	b2db      	uxtb	r3, r3
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002310:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	621a      	str	r2, [r3, #32]
}
 800232c:	bf00      	nop
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002336:	b480      	push	{r7}
 8002338:	b087      	sub	sp, #28
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002362:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002374:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	031b      	lsls	r3, r3, #12
 800237a:	b29b      	uxth	r3, r3
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	031b      	lsls	r3, r3, #12
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	621a      	str	r2, [r3, #32]
}
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b087      	sub	sp, #28
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	401a      	ands	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1a      	ldr	r2, [r3, #32]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	621a      	str	r2, [r3, #32]
}
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800240c:	2302      	movs	r3, #2
 800240e:	e041      	b.n	8002494 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d004      	beq.n	8002468 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d10c      	bne.n	8002482 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800246e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400

080024a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	2600      	movs	r6, #0
 80024d0:	4d0c      	ldr	r5, [pc, #48]	; (8002504 <__libc_init_array+0x38>)
 80024d2:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	f000 f822 	bl	8002524 <_init>
 80024e0:	2600      	movs	r6, #0
 80024e2:	4d0a      	ldr	r5, [pc, #40]	; (800250c <__libc_init_array+0x40>)
 80024e4:	4c0a      	ldr	r4, [pc, #40]	; (8002510 <__libc_init_array+0x44>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	0800255c 	.word	0x0800255c
 8002508:	0800255c 	.word	0x0800255c
 800250c:	0800255c 	.word	0x0800255c
 8002510:	08002560 	.word	0x08002560

08002514 <memset>:
 8002514:	4603      	mov	r3, r0
 8002516:	4402      	add	r2, r0
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	f803 1b01 	strb.w	r1, [r3], #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
