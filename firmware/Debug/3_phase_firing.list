
3_phase_firing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006b50  08006b50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b50  08006b50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000000c  08006b64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006b64  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d177  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218a  00000000  00000000  0002d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00030008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a55  00000000  00000000  00030bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db9f  00000000  00000000  00048625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c11  00000000  00000000  000561c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfdd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034dc  00000000  00000000  000dfe28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b18 	.word	0x08006b18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08006b18 	.word	0x08006b18

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fa0d 	bl	8000570 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f81b 	bl	8000190 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f8d7 	bl	800030c <MX_GPIO_Init>
	// MX_USB_DEVICE_Init();
	MX_TIM1_Init();
 800015e:	f000 f873 	bl	8000248 <MX_TIM1_Init>
	/* USER CODE END 2 */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8000162:	4b0a      	ldr	r3, [pc, #40]	; (800018c <main+0x40>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800016a:	639a      	str	r2, [r3, #56]	; 0x38
	/* Infinite loop */
	while(1){
	/* USER CODE BEGIN WHILE */
		for(int i; i<5000;i++){
 800016c:	e005      	b.n	800017a <main+0x2e>
			set_alpha(i);
 800016e:	6878      	ldr	r0, [r7, #4]
 8000170:	f000 f918 	bl	80003a4 <set_alpha>
		for(int i; i<5000;i++){
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	3301      	adds	r3, #1
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000180:	4293      	cmp	r3, r2
 8000182:	ddf4      	ble.n	800016e <main+0x22>
		}
		set_alpha(0);
 8000184:	2000      	movs	r0, #0
 8000186:	f000 f90d 	bl	80003a4 <set_alpha>
		for(int i; i<5000;i++){
 800018a:	e7ef      	b.n	800016c <main+0x20>
 800018c:	20000028 	.word	0x20000028

08000190 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b094      	sub	sp, #80	; 0x50
 8000194:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f006 fcb2 	bl	8006b08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	f107 0314 	add.w	r3, r7, #20
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]
 80001b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c0:	2301      	movs	r3, #1
 80001c2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ce:	2301      	movs	r3, #1
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d2:	2302      	movs	r3, #2
 80001d4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ff8e 	bl	8002108 <HAL_RCC_OscConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80001f2:	f000 f8f3 	bl	80003dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	230f      	movs	r3, #15
 80001f8:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000206:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2101      	movs	r1, #1
 8000212:	4618      	mov	r0, r3
 8000214:	f002 f9fa 	bl	800260c <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x92>
	{
		Error_Handler();
 800021e:	f000 f8dd 	bl	80003dc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000222:	2310      	movs	r3, #16
 8000224:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800022a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fb52 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800023a:	f000 f8cf 	bl	80003dc <Error_Handler>
	}
}
 800023e:	bf00      	nop
 8000240:	3750      	adds	r7, #80	; 0x50
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08a      	sub	sp, #40	; 0x28
 800024c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */
	/* USER CODE END TIM1_Init 0 */
	TIM_OnePulse_InitTypeDef sConfigOP = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2224      	movs	r2, #36	; 0x24
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f006 fc57 	bl	8006b08 <memset>


	/* USER CODE BEGIN TIM1_Init 1 */
	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800025a:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MX_TIM1_Init+0xbc>)
 800025c:	4a2a      	ldr	r2, [pc, #168]	; (8000308 <MX_TIM1_Init+0xc0>)
 800025e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48-1;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <MX_TIM1_Init+0xbc>)
 8000262:	222f      	movs	r2, #47	; 0x2f
 8000264:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000266:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_TIM1_Init+0xbc>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 800026c:	4b25      	ldr	r3, [pc, #148]	; (8000304 <MX_TIM1_Init+0xbc>)
 800026e:	2200      	movs	r2, #0
 8000270:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_TIM1_Init+0xbc>)
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <MX_TIM1_Init+0xbc>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_TIM1_Init+0xbc>)
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000284:	2108      	movs	r1, #8
 8000286:	481f      	ldr	r0, [pc, #124]	; (8000304 <MX_TIM1_Init+0xbc>)
 8000288:	f002 fbdc 	bl	8002a44 <HAL_TIM_OnePulse_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_TIM1_Init+0x4e>
	{
		Error_Handler();
 8000292:	f000 f8a3 	bl	80003dc <Error_Handler>
	}

	if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000296:	2108      	movs	r1, #8
 8000298:	481a      	ldr	r0, [pc, #104]	; (8000304 <MX_TIM1_Init+0xbc>)
 800029a:	f002 fbd3 	bl	8002a44 <HAL_TIM_OnePulse_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM1_Init+0x60>
	  {
	    /* Initialization Error */
	    Error_Handler();
 80002a4:	f000 f89a 	bl	80003dc <Error_Handler>
	  }

	sConfigOP.OCMode = TIM_OCMODE_PWM2;
 80002a8:	2370      	movs	r3, #112	; 0x70
 80002aa:	607b      	str	r3, [r7, #4]
	sConfigOP.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
	sConfigOP.Pulse        = 1000;
 80002b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b4:	60bb      	str	r3, [r7, #8]
	sConfigOP.ICPolarity   = TIM_ICPOLARITY_RISING;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
	sConfigOP.ICSelection  = TIM_ICSELECTION_DIRECTTI;
 80002ba:	2301      	movs	r3, #1
 80002bc:	623b      	str	r3, [r7, #32]
	sConfigOP.ICFilter     = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOP.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
	sConfigOP.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
	sConfigOP.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_OnePulse_ConfigChannel(&htim1, &sConfigOP, TIM_CHANNEL_1, TIM_CHANNEL_2) != HAL_OK)
 80002ce:	1d39      	adds	r1, r7, #4
 80002d0:	2304      	movs	r3, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	480b      	ldr	r0, [pc, #44]	; (8000304 <MX_TIM1_Init+0xbc>)
 80002d6:	f002 fc65 	bl	8002ba4 <HAL_TIM_OnePulse_ConfigChannel>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80002e0:	f000 f87c 	bl	80003dc <Error_Handler>
	}


	/* USER CODE BEGIN TIM1_Init 2 */
	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <MX_TIM1_Init+0xbc>)
 80002e6:	f000 f8b1 	bl	800044c <HAL_TIM_MspPostInit>

	if (HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80002ea:	2100      	movs	r1, #0
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_TIM1_Init+0xbc>)
 80002ee:	f002 fc03 	bl	8002af8 <HAL_TIM_OnePulse_Start>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_TIM1_Init+0xb4>
	  {
	    /* Starting Error */
	    Error_Handler();
 80002f8:	f000 f870 	bl	80003dc <Error_Handler>
	  }
}
 80002fc:	bf00      	nop
 80002fe:	3728      	adds	r7, #40	; 0x28
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000028 	.word	0x20000028
 8000308:	40012c00 	.word	0x40012c00

0800030c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a1d      	ldr	r2, [pc, #116]	; (800039c <MX_GPIO_Init+0x90>)
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0310 	and.w	r3, r3, #16
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0x90>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <MX_GPIO_Init+0x90>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_GPIO_Init+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0320 	and.w	r3, r3, #32
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <MX_GPIO_Init+0x90>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_GPIO_Init+0x94>)
 8000370:	f000 fbc0 	bl	8000af4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_PIN_Pin */
	GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000378:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_GPIO_Init+0x94>)
 800038e:	f000 fa35 	bl	80007fc <HAL_GPIO_Init>

}
 8000392:	bf00      	nop
 8000394:	3720      	adds	r7, #32
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	40011000 	.word	0x40011000

080003a4 <set_alpha>:

/* USER CODE BEGIN 4 */
void set_alpha(int alpha){
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <set_alpha+0x34>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_AUTORELOAD(&htim1, (alpha+SCR_PULSE_WIDTH));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <set_alpha+0x34>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <set_alpha+0x34>)
 80003ca:	60da      	str	r2, [r3, #12]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000028 	.word	0x20000028

080003dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_TIM_MspPostInit>:
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <HAL_TIM_MspPostInit+0x5c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d118      	bne.n	800049e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_TIM_MspPostInit+0x60>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_TIM_MspPostInit+0x60>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_TIM_MspPostInit+0x60>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	2302      	movs	r3, #2
 800048c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2302      	movs	r3, #2
 8000490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <HAL_TIM_MspPostInit+0x64>)
 800049a:	f000 f9af 	bl	80007fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40012c00 	.word	0x40012c00
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010800 	.word	0x40010800

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fa:	f000 f87f 	bl	80005fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800050a:	f000 fb0b 	bl	8000b24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000078 	.word	0x20000078

08000518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054a:	f7ff ffe5 	bl	8000518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054e:	f006 fab7 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff fdfb 	bl	800014c <main>
  bx lr
 8000556:	4770      	bx	lr
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000560:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8000564:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000568:	20000364 	.word	0x20000364

0800056c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>
	...

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_Init+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_Init+0x28>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f907 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000586:	200f      	movs	r0, #15
 8000588:	f000 f808 	bl	800059c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800058c:	f7ff ff2c 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40022000 	.word	0x40022000

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_InitTick+0x54>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_InitTick+0x58>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f911 	bl	80007e2 <HAL_SYSTICK_Config>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	e00e      	b.n	80005e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b0f      	cmp	r3, #15
 80005ce:	d80a      	bhi.n	80005e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d0:	2200      	movs	r2, #0
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005d8:	f000 f8e7 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <HAL_InitTick+0x5c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e000      	b.n	80005e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_IncTick+0x1c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x20>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x20>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000008 	.word	0x20000008
 800061c:	20000070 	.word	0x20000070

08000620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return uwTick;
 8000624:	4b02      	ldr	r3, [pc, #8]	; (8000630 <HAL_GetTick+0x10>)
 8000626:	681b      	ldr	r3, [r3, #0]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000070 	.word	0x20000070

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	f7ff ff90 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff49 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff5e 	bl	800067c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ffb0 	bl	8000750 <SysTick_Config>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e161      	b.n	8000ad4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000810:	2201      	movs	r2, #1
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	69fa      	ldr	r2, [r7, #28]
 8000820:	4013      	ands	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	429a      	cmp	r2, r3
 800082a:	f040 8150 	bne.w	8000ace <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	4a97      	ldr	r2, [pc, #604]	; (8000a90 <HAL_GPIO_Init+0x294>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d05e      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000838:	4a95      	ldr	r2, [pc, #596]	; (8000a90 <HAL_GPIO_Init+0x294>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d875      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800083e:	4a95      	ldr	r2, [pc, #596]	; (8000a94 <HAL_GPIO_Init+0x298>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d058      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000844:	4a93      	ldr	r2, [pc, #588]	; (8000a94 <HAL_GPIO_Init+0x298>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d86f      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800084a:	4a93      	ldr	r2, [pc, #588]	; (8000a98 <HAL_GPIO_Init+0x29c>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d052      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000850:	4a91      	ldr	r2, [pc, #580]	; (8000a98 <HAL_GPIO_Init+0x29c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d869      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000856:	4a91      	ldr	r2, [pc, #580]	; (8000a9c <HAL_GPIO_Init+0x2a0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d04c      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 800085c:	4a8f      	ldr	r2, [pc, #572]	; (8000a9c <HAL_GPIO_Init+0x2a0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d863      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000862:	4a8f      	ldr	r2, [pc, #572]	; (8000aa0 <HAL_GPIO_Init+0x2a4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d046      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
 8000868:	4a8d      	ldr	r2, [pc, #564]	; (8000aa0 <HAL_GPIO_Init+0x2a4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d85d      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 800086e:	2b12      	cmp	r3, #18
 8000870:	d82a      	bhi.n	80008c8 <HAL_GPIO_Init+0xcc>
 8000872:	2b12      	cmp	r3, #18
 8000874:	d859      	bhi.n	800092a <HAL_GPIO_Init+0x12e>
 8000876:	a201      	add	r2, pc, #4	; (adr r2, 800087c <HAL_GPIO_Init+0x80>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	080008f7 	.word	0x080008f7
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008e3 	.word	0x080008e3
 8000888:	08000925 	.word	0x08000925
 800088c:	0800092b 	.word	0x0800092b
 8000890:	0800092b 	.word	0x0800092b
 8000894:	0800092b 	.word	0x0800092b
 8000898:	0800092b 	.word	0x0800092b
 800089c:	0800092b 	.word	0x0800092b
 80008a0:	0800092b 	.word	0x0800092b
 80008a4:	0800092b 	.word	0x0800092b
 80008a8:	0800092b 	.word	0x0800092b
 80008ac:	0800092b 	.word	0x0800092b
 80008b0:	0800092b 	.word	0x0800092b
 80008b4:	0800092b 	.word	0x0800092b
 80008b8:	0800092b 	.word	0x0800092b
 80008bc:	0800092b 	.word	0x0800092b
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	4a76      	ldr	r2, [pc, #472]	; (8000aa4 <HAL_GPIO_Init+0x2a8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d013      	beq.n	80008f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ce:	e02c      	b.n	800092a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	623b      	str	r3, [r7, #32]
          break;
 80008d6:	e029      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	3304      	adds	r3, #4
 80008de:	623b      	str	r3, [r7, #32]
          break;
 80008e0:	e024      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	3308      	adds	r3, #8
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e01f      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	330c      	adds	r3, #12
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e01a      	b.n	800092c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fe:	2304      	movs	r3, #4
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e013      	b.n	800092c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d105      	bne.n	8000918 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090c:	2308      	movs	r3, #8
 800090e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	611a      	str	r2, [r3, #16]
          break;
 8000916:	e009      	b.n	800092c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000918:	2308      	movs	r3, #8
 800091a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	615a      	str	r2, [r3, #20]
          break;
 8000922:	e003      	b.n	800092c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x130>
          break;
 800092a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2bff      	cmp	r3, #255	; 0xff
 8000930:	d801      	bhi.n	8000936 <HAL_GPIO_Init+0x13a>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	e001      	b.n	800093a <HAL_GPIO_Init+0x13e>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2bff      	cmp	r3, #255	; 0xff
 8000940:	d802      	bhi.n	8000948 <HAL_GPIO_Init+0x14c>
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	e002      	b.n	800094e <HAL_GPIO_Init+0x152>
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	3b08      	subs	r3, #8
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	210f      	movs	r1, #15
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	401a      	ands	r2, r3
 8000960:	6a39      	ldr	r1, [r7, #32]
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	431a      	orrs	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 80a9 	beq.w	8000ace <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800097c:	4b4a      	ldr	r3, [pc, #296]	; (8000aa8 <HAL_GPIO_Init+0x2ac>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a49      	ldr	r2, [pc, #292]	; (8000aa8 <HAL_GPIO_Init+0x2ac>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <HAL_GPIO_Init+0x2ac>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000994:	4a45      	ldr	r2, [pc, #276]	; (8000aac <HAL_GPIO_Init+0x2b0>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f003 0303 	and.w	r3, r3, #3
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	220f      	movs	r2, #15
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3d      	ldr	r2, [pc, #244]	; (8000ab0 <HAL_GPIO_Init+0x2b4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d00d      	beq.n	80009dc <HAL_GPIO_Init+0x1e0>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <HAL_GPIO_Init+0x2b8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x1dc>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3b      	ldr	r2, [pc, #236]	; (8000ab8 <HAL_GPIO_Init+0x2bc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <HAL_GPIO_Init+0x1d8>
 80009d0:	2302      	movs	r3, #2
 80009d2:	e004      	b.n	80009de <HAL_GPIO_Init+0x1e2>
 80009d4:	2303      	movs	r3, #3
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x1e2>
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <HAL_GPIO_Init+0x1e2>
 80009dc:	2300      	movs	r3, #0
 80009de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e0:	f002 0203 	and.w	r2, r2, #3
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	4093      	lsls	r3, r2
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ee:	492f      	ldr	r1, [pc, #188]	; (8000aac <HAL_GPIO_Init+0x2b0>)
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d006      	beq.n	8000a16 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	492b      	ldr	r1, [pc, #172]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	4927      	ldr	r1, [pc, #156]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a20:	4013      	ands	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	4921      	ldr	r1, [pc, #132]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	491d      	ldr	r1, [pc, #116]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	4917      	ldr	r1, [pc, #92]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	608b      	str	r3, [r1, #8]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4913      	ldr	r1, [pc, #76]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d01f      	beq.n	8000ac0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	490d      	ldr	r1, [pc, #52]	; (8000abc <HAL_GPIO_Init+0x2c0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60cb      	str	r3, [r1, #12]
 8000a8c:	e01f      	b.n	8000ace <HAL_GPIO_Init+0x2d2>
 8000a8e:	bf00      	nop
 8000a90:	10320000 	.word	0x10320000
 8000a94:	10310000 	.word	0x10310000
 8000a98:	10220000 	.word	0x10220000
 8000a9c:	10210000 	.word	0x10210000
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	10110000 	.word	0x10110000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_GPIO_Init+0x2f4>)
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4909      	ldr	r1, [pc, #36]	; (8000af0 <HAL_GPIO_Init+0x2f4>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	fa22 f303 	lsr.w	r3, r2, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f47f ae96 	bne.w	8000810 <HAL_GPIO_Init+0x14>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	372c      	adds	r7, #44	; 0x2c
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40010400 	.word	0x40010400

08000af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
 8000b00:	4613      	mov	r3, r2
 8000b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b04:	787b      	ldrb	r3, [r7, #1]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b10:	e003      	b.n	8000b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	041a      	lsls	r2, r3, #16
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	611a      	str	r2, [r3, #16]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fd87 	bl	8005644 <USB_ReadInterrupts>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b40:	d102      	bne.n	8000b48 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fb00 	bl	8001148 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fd79 	bl	8005644 <USB_ReadInterrupts>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b5c:	d112      	bne.n	8000b84 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b70:	b292      	uxth	r2, r2
 8000b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f005 fe39 	bl	80067ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f923 	bl	8000dca <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 fd5b 	bl	8005644 <USB_ReadInterrupts>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b98:	d10b      	bne.n	8000bb2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bac:	b292      	uxth	r2, r2
 8000bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 fd44 	bl	8005644 <USB_ReadInterrupts>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bc6:	d10b      	bne.n	8000be0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bda:	b292      	uxth	r2, r2
 8000bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fd2d 	bl	8005644 <USB_ReadInterrupts>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bf4:	d126      	bne.n	8000c44 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0204 	bic.w	r2, r2, #4
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0208 	bic.w	r2, r2, #8
 8000c20:	b292      	uxth	r2, r2
 8000c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f005 fe1a 	bl	8006860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fcfb 	bl	8005644 <USB_ReadInterrupts>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c58:	f040 8082 	bne.w	8000d60 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	77fb      	strb	r3, [r7, #31]
 8000c60:	e010      	b.n	8000c84 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	7ffb      	ldrb	r3, [r7, #31]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	441a      	add	r2, r3
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	b292      	uxth	r2, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	3320      	adds	r3, #32
 8000c78:	443b      	add	r3, r7
 8000c7a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000c7e:	7ffb      	ldrb	r3, [r7, #31]
 8000c80:	3301      	adds	r3, #1
 8000c82:	77fb      	strb	r3, [r7, #31]
 8000c84:	7ffb      	ldrb	r3, [r7, #31]
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	d9eb      	bls.n	8000c62 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 0201 	orr.w	r2, r2, #1
 8000c9c:	b292      	uxth	r2, r2
 8000c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	b292      	uxth	r2, r2
 8000cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000cba:	bf00      	nop
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f6      	beq.n	8000cbc <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ce0:	b292      	uxth	r2, r2
 8000ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	77fb      	strb	r3, [r7, #31]
 8000cea:	e00f      	b.n	8000d0c <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000cec:	7ffb      	ldrb	r3, [r7, #31]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	7ffa      	ldrb	r2, [r7, #31]
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	440a      	add	r2, r1
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	3320      	adds	r3, #32
 8000cfe:	443b      	add	r3, r7
 8000d00:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000d04:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000d06:	7ffb      	ldrb	r3, [r7, #31]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	77fb      	strb	r3, [r7, #31]
 8000d0c:	7ffb      	ldrb	r3, [r7, #31]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	d9ec      	bls.n	8000cec <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 0208 	orr.w	r2, r2, #8
 8000d24:	b292      	uxth	r2, r2
 8000d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0204 	orr.w	r2, r2, #4
 8000d54:	b292      	uxth	r2, r2
 8000d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f005 fd66 	bl	800682c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fc6d 	bl	8005644 <USB_ReadInterrupts>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d74:	d10e      	bne.n	8000d94 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f005 fd1f 	bl	80067d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fc53 	bl	8005644 <USB_ReadInterrupts>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000da8:	d10b      	bne.n	8000dc2 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dbc:	b292      	uxth	r2, r2
 8000dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d101      	bne.n	8000de4 <HAL_PCD_SetAddress+0x1a>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e013      	b.n	8000e0c <HAL_PCD_SetAddress+0x42>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 fc0e 	bl	800561e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	70fb      	strb	r3, [r7, #3]
 8000e26:	460b      	mov	r3, r1
 8000e28:	803b      	strh	r3, [r7, #0]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da0e      	bge.n	8000e58 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	705a      	strb	r2, [r3, #1]
 8000e56:	e00e      	b.n	8000e76 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	f003 0207 	and.w	r2, r3, #7
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000e82:	883a      	ldrh	r2, [r7, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	78ba      	ldrb	r2, [r7, #2]
 8000e8c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d004      	beq.n	8000ea0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000ea0:	78bb      	ldrb	r3, [r7, #2]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d102      	bne.n	8000eac <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <HAL_PCD_EP_Open+0xa6>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e00e      	b.n	8000ed8 <HAL_PCD_EP_Open+0xc4>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 f909 	bl	80030e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	460b      	mov	r3, r1
 8000eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	f003 0207 	and.w	r2, r3, #7
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f20:	7afb      	ldrb	r3, [r7, #11]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6979      	ldr	r1, [r7, #20]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fc39 	bl	80037b4 <USB_EPStartXfer>
 8000f42:	e005      	b.n	8000f50 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6979      	ldr	r1, [r7, #20]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fc32 	bl	80037b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	460b      	mov	r3, r1
 8000f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d106      	bne.n	8000fca <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fbf6 	bl	80037b4 <USB_EPStartXfer>
 8000fc8:	e005      	b.n	8000fd6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6979      	ldr	r1, [r7, #20]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fbef 	bl	80037b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	f003 0207 	and.w	r2, r3, #7
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d901      	bls.n	8000ffe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e04c      	b.n	8001098 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	da0e      	bge.n	8001024 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2201      	movs	r2, #1
 8001020:	705a      	strb	r2, [r3, #1]
 8001022:	e00c      	b.n	800103e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	b2da      	uxtb	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001056:	2b01      	cmp	r3, #1
 8001058:	d101      	bne.n	800105e <HAL_PCD_EP_SetStall+0x7e>
 800105a:	2302      	movs	r3, #2
 800105c:	e01c      	b.n	8001098 <HAL_PCD_EP_SetStall+0xb8>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68f9      	ldr	r1, [r7, #12]
 800106c:	4618      	mov	r0, r3
 800106e:	f004 f9d9 	bl	8005424 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f004 faea 	bl	8005662 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	f003 020f 	and.w	r2, r3, #15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d901      	bls.n	80010be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e040      	b.n	8001140 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da0e      	bge.n	80010e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2201      	movs	r2, #1
 80010e0:	705a      	strb	r2, [r3, #1]
 80010e2:	e00e      	b.n	8001102 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	f003 0207 	and.w	r2, r3, #7
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	b2da      	uxtb	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <HAL_PCD_EP_ClrStall+0x82>
 800111e:	2302      	movs	r3, #2
 8001120:	e00e      	b.n	8001140 <HAL_PCD_EP_ClrStall+0xa0>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68f9      	ldr	r1, [r7, #12]
 8001130:	4618      	mov	r0, r3
 8001132:	f004 f9c7 	bl	80054c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08e      	sub	sp, #56	; 0x38
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001150:	e2ec      	b.n	800172c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800115c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001168:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 8161 	bne.w	8001434 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	d152      	bne.n	8001222 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800118c:	81fb      	strh	r3, [r7, #14]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800119c:	b29b      	uxth	r3, r3
 800119e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3328      	adds	r3, #40	; 0x28
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	3302      	adds	r3, #2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	441a      	add	r2, r3
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80011e0:	2100      	movs	r1, #0
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f005 fadb 	bl	800679e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 829b 	beq.w	800172c <PCD_EP_ISR_Handler+0x5e4>
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 8296 	bne.w	800172c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800120c:	b2da      	uxtb	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b292      	uxth	r2, r2
 8001214:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001220:	e284      	b.n	800172c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001232:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001238:	2b00      	cmp	r3, #0
 800123a:	d034      	beq.n	80012a6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001244:	b29b      	uxth	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	3306      	adds	r3, #6
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	4413      	add	r3, r2
 800125a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800127a:	b29b      	uxth	r3, r3
 800127c:	f004 fa41 	bl	8005702 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29a      	uxth	r2, r3
 8001288:	f640 738f 	movw	r3, #3983	; 0xf8f
 800128c:	4013      	ands	r3, r2
 800128e:	823b      	strh	r3, [r7, #16]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	8a3a      	ldrh	r2, [r7, #16]
 8001296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800129a:	b292      	uxth	r2, r2
 800129c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f005 fa50 	bl	8006744 <HAL_PCD_SetupStageCallback>
 80012a4:	e242      	b.n	800172c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f280 823e 	bge.w	800172c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012bc:	4013      	ands	r3, r2
 80012be:	83bb      	strh	r3, [r7, #28]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	8bba      	ldrh	r2, [r7, #28]
 80012c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ca:	b292      	uxth	r2, r2
 80012cc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	3306      	adds	r3, #6
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <PCD_EP_ISR_Handler+0x1ee>
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d015      	beq.n	8001336 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	6959      	ldr	r1, [r3, #20]
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800131a:	b29b      	uxth	r3, r3
 800131c:	f004 f9f1 	bl	8005702 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	441a      	add	r2, r3
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800132e:	2100      	movs	r1, #0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f005 fa19 	bl	8006768 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 81f2 	bne.w	800172c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4413      	add	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d112      	bne.n	8001396 <PCD_EP_ISR_Handler+0x24e>
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800137a:	b29a      	uxth	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800138a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800138e:	b29a      	uxth	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	801a      	strh	r2, [r3, #0]
 8001394:	e02f      	b.n	80013f6 <PCD_EP_ISR_Handler+0x2ae>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b3e      	cmp	r3, #62	; 0x3e
 800139c:	d813      	bhi.n	80013c6 <PCD_EP_ISR_Handler+0x27e>
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <PCD_EP_ISR_Handler+0x270>
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	3301      	adds	r3, #1
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	b29a      	uxth	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	801a      	strh	r2, [r3, #0]
 80013c4:	e017      	b.n	80013f6 <PCD_EP_ISR_Handler+0x2ae>
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <PCD_EP_ISR_Handler+0x298>
 80013da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013dc:	3b01      	subs	r3, #1
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
 80013e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	029b      	lsls	r3, r3, #10
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001406:	827b      	strh	r3, [r7, #18]
 8001408:	8a7b      	ldrh	r3, [r7, #18]
 800140a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800140e:	827b      	strh	r3, [r7, #18]
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001416:	827b      	strh	r3, [r7, #18]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142e:	b29b      	uxth	r3, r3
 8001430:	8013      	strh	r3, [r2, #0]
 8001432:	e17b      	b.n	800172c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001446:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800144a:	2b00      	cmp	r3, #0
 800144c:	f280 80ea 	bge.w	8001624 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b29a      	uxth	r2, r3
 8001462:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001466:	4013      	ands	r3, r2
 8001468:	853b      	strh	r3, [r7, #40]	; 0x28
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800147a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800147e:	b292      	uxth	r2, r2
 8001480:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001482:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d122      	bne.n	80014e6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	3306      	adds	r3, #6
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014c8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80014ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8087 	beq.w	80015e0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	6959      	ldr	r1, [r3, #20]
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	88da      	ldrh	r2, [r3, #6]
 80014de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014e0:	f004 f90f 	bl	8005702 <USB_ReadPMA>
 80014e4:	e07c      	b.n	80015e0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	78db      	ldrb	r3, [r3, #3]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d108      	bne.n	8001500 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80014ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014f0:	461a      	mov	r2, r3
 80014f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f927 	bl	8001748 <HAL_PCD_EP_DB_Receive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80014fe:	e06f      	b.n	80015e0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151a:	847b      	strh	r3, [r7, #34]	; 0x22
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	441a      	add	r2, r3
 800152a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800152c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800153c:	b29b      	uxth	r3, r3
 800153e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d021      	beq.n	800159e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	3302      	adds	r3, #2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001582:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001586:	2b00      	cmp	r3, #0
 8001588:	d02a      	beq.n	80015e0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	6959      	ldr	r1, [r3, #20]
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	891a      	ldrh	r2, [r3, #8]
 8001596:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001598:	f004 f8b3 	bl	8005702 <USB_ReadPMA>
 800159c:	e020      	b.n	80015e0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	3306      	adds	r3, #6
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80015c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	6959      	ldr	r1, [r3, #20]
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	895a      	ldrh	r2, [r3, #10]
 80015da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015dc:	f004 f891 	bl	8005702 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015e6:	441a      	add	r2, r3
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015f2:	441a      	add	r2, r3
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <PCD_EP_ISR_Handler+0x4c2>
 8001600:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	429a      	cmp	r2, r3
 8001608:	d206      	bcs.n	8001618 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f005 f8a9 	bl	8006768 <HAL_PCD_DataOutStageCallback>
 8001616:	e005      	b.n	8001624 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161e:	4618      	mov	r0, r3
 8001620:	f002 f8c8 	bl	80037b4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001624:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	2b00      	cmp	r3, #0
 800162c:	d07e      	beq.n	800172c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800162e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165c:	843b      	strh	r3, [r7, #32]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	441a      	add	r2, r3
 800166c:	8c3b      	ldrh	r3, [r7, #32]
 800166e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001676:	b29b      	uxth	r3, r3
 8001678:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d00c      	beq.n	800169c <PCD_EP_ISR_Handler+0x554>
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800168e:	2b02      	cmp	r3, #2
 8001690:	d146      	bne.n	8001720 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001692:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d141      	bne.n	8001720 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	3302      	adds	r3, #2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016c4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	699a      	ldr	r2, [r3, #24]
 80016ca:	8bfb      	ldrh	r3, [r7, #30]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d906      	bls.n	80016de <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	8bfb      	ldrh	r3, [r7, #30]
 80016d6:	1ad2      	subs	r2, r2, r3
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	e002      	b.n	80016e4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d106      	bne.n	80016fa <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f005 f853 	bl	800679e <HAL_PCD_DataInStageCallback>
 80016f8:	e018      	b.n	800172c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	8bfb      	ldrh	r3, [r7, #30]
 8001700:	441a      	add	r2, r3
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	8bfb      	ldrh	r3, [r7, #30]
 800170c:	441a      	add	r2, r3
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001718:	4618      	mov	r0, r3
 800171a:	f002 f84b 	bl	80037b4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800171e:	e005      	b.n	800172c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001720:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001722:	461a      	mov	r2, r3
 8001724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f91b 	bl	8001962 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001734:	b29b      	uxth	r3, r3
 8001736:	b21b      	sxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	f6ff ad0a 	blt.w	8001152 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3738      	adds	r7, #56	; 0x38
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	4613      	mov	r3, r2
 8001754:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d07e      	beq.n	800185e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001768:	b29b      	uxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	3302      	adds	r3, #2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001788:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	8b7b      	ldrh	r3, [r7, #26]
 8001790:	429a      	cmp	r2, r3
 8001792:	d306      	bcc.n	80017a2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	8b7b      	ldrh	r3, [r7, #26]
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	e002      	b.n	80017a8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d123      	bne.n	80017f8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ca:	833b      	strh	r3, [r7, #24]
 80017cc:	8b3b      	ldrh	r3, [r7, #24]
 80017ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017d2:	833b      	strh	r3, [r7, #24]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	441a      	add	r2, r3
 80017e2:	8b3b      	ldrh	r3, [r7, #24]
 80017e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01f      	beq.n	8001842 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181c:	82fb      	strh	r3, [r7, #22]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	441a      	add	r2, r3
 800182c:	8afb      	ldrh	r3, [r7, #22]
 800182e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800183e:	b29b      	uxth	r3, r3
 8001840:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001842:	8b7b      	ldrh	r3, [r7, #26]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8087 	beq.w	8001958 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	6959      	ldr	r1, [r3, #20]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	891a      	ldrh	r2, [r3, #8]
 8001856:	8b7b      	ldrh	r3, [r7, #26]
 8001858:	f003 ff53 	bl	8005702 <USB_ReadPMA>
 800185c:	e07c      	b.n	8001958 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	3306      	adds	r3, #6
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001886:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	8b7b      	ldrh	r3, [r7, #26]
 800188e:	429a      	cmp	r2, r3
 8001890:	d306      	bcc.n	80018a0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	699a      	ldr	r2, [r3, #24]
 8001896:	8b7b      	ldrh	r3, [r7, #26]
 8001898:	1ad2      	subs	r2, r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	619a      	str	r2, [r3, #24]
 800189e:	e002      	b.n	80018a6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d123      	bne.n	80018f6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018c8:	83fb      	strh	r3, [r7, #30]
 80018ca:	8bfb      	ldrh	r3, [r7, #30]
 80018cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	441a      	add	r2, r3
 80018e0:	8bfb      	ldrh	r3, [r7, #30]
 80018e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d11f      	bne.n	8001940 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191a:	83bb      	strh	r3, [r7, #28]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	441a      	add	r2, r3
 800192a:	8bbb      	ldrh	r3, [r7, #28]
 800192c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001938:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800193c:	b29b      	uxth	r3, r3
 800193e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001940:	8b7b      	ldrh	r3, [r7, #26]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	6959      	ldr	r1, [r3, #20]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	895a      	ldrh	r2, [r3, #10]
 8001952:	8b7b      	ldrh	r3, [r7, #26]
 8001954:	f003 fed5 	bl	8005702 <USB_ReadPMA>
    }
  }

  return count;
 8001958:	8b7b      	ldrh	r3, [r7, #26]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b0a2      	sub	sp, #136	; 0x88
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	4613      	mov	r3, r2
 800196e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 81c7 	beq.w	8001d0a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001984:	b29b      	uxth	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	3302      	adds	r3, #2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	4413      	add	r3, r2
 800199a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d907      	bls.n	80019c4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80019bc:	1ad2      	subs	r2, r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	619a      	str	r2, [r3, #24]
 80019c2:	e002      	b.n	80019ca <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80b9 	bne.w	8001b46 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d126      	bne.n	8001a2a <HAL_PCD_EP_DB_Transmit+0xc8>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	4413      	add	r3, r2
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	011a      	lsls	r2, r3, #4
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	4413      	add	r3, r2
 80019fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	801a      	strh	r2, [r3, #0]
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	801a      	strh	r2, [r3, #0]
 8001a28:	e01a      	b.n	8001a60 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d116      	bne.n	8001a60 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a46:	4413      	add	r3, r2
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	011a      	lsls	r2, r3, #4
 8001a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a52:	4413      	add	r3, r2
 8001a54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d126      	bne.n	8001abc <HAL_PCD_EP_DB_Transmit+0x15a>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	4413      	add	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	011a      	lsls	r2, r3, #4
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	e017      	b.n	8001aec <HAL_PCD_EP_DB_Transmit+0x18a>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d113      	bne.n	8001aec <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	011a      	lsls	r2, r3, #4
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f004 fe53 	bl	800679e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 82d4 	beq.w	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	827b      	strh	r3, [r7, #18]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	441a      	add	r2, r3
 8001b2e:	8a7b      	ldrh	r3, [r7, #18]
 8001b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8013      	strh	r3, [r2, #0]
 8001b44:	e2b2      	b.n	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d021      	beq.n	8001b94 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f040 8286 	bne.w	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ba8:	441a      	add	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bb6:	441a      	add	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	6a1a      	ldr	r2, [r3, #32]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d309      	bcc.n	8001bdc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	6a1a      	ldr	r2, [r3, #32]
 8001bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	621a      	str	r2, [r3, #32]
 8001bda:	e015      	b.n	8001c08 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001be8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bf2:	e009      	b.n	8001c08 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d155      	bne.n	8001cbc <HAL_PCD_EP_DB_Transmit+0x35a>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c24:	4413      	add	r3, r2
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	011a      	lsls	r2, r3, #4
 8001c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c30:	4413      	add	r3, r2
 8001c32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d112      	bne.n	8001c64 <HAL_PCD_EP_DB_Transmit+0x302>
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	e047      	b.n	8001cf4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c66:	2b3e      	cmp	r3, #62	; 0x3e
 8001c68:	d811      	bhi.n	8001c8e <HAL_PCD_EP_DB_Transmit+0x32c>
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	029b      	lsls	r3, r3, #10
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	e032      	b.n	8001cf4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_PCD_EP_DB_Transmit+0x342>
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	029b      	lsls	r3, r3, #10
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	e01b      	b.n	8001cf4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	785b      	ldrb	r3, [r3, #1]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d117      	bne.n	8001cf4 <HAL_PCD_EP_DB_Transmit+0x392>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd8:	4413      	add	r3, r2
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	011a      	lsls	r2, r3, #4
 8001ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6959      	ldr	r1, [r3, #20]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	891a      	ldrh	r2, [r3, #8]
 8001d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	f003 fcb8 	bl	8005678 <USB_WritePMA>
 8001d08:	e1d0      	b.n	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3306      	adds	r3, #6
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d307      	bcc.n	8001d52 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	619a      	str	r2, [r3, #24]
 8001d50:	e002      	b.n	8001d58 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 80c4 	bne.w	8001eea <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d126      	bne.n	8001db8 <HAL_PCD_EP_DB_Transmit+0x456>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7e:	4413      	add	r3, r2
 8001d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	011a      	lsls	r2, r3, #4
 8001d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	e01a      	b.n	8001dee <HAL_PCD_EP_DB_Transmit+0x48c>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d116      	bne.n	8001dee <HAL_PCD_EP_DB_Transmit+0x48c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	677b      	str	r3, [r7, #116]	; 0x74
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd4:	4413      	add	r3, r2
 8001dd6:	677b      	str	r3, [r7, #116]	; 0x74
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	011a      	lsls	r2, r3, #4
 8001dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de0:	4413      	add	r3, r2
 8001de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001de6:	673b      	str	r3, [r7, #112]	; 0x70
 8001de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dea:	2200      	movs	r2, #0
 8001dec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d12f      	bne.n	8001e5c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e14:	4413      	add	r3, r2
 8001e16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	011a      	lsls	r2, r3, #4
 8001e20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e24:	4413      	add	r3, r2
 8001e26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	e017      	b.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x52a>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d113      	bne.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x52a>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e72:	4413      	add	r3, r2
 8001e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	011a      	lsls	r2, r3, #4
 8001e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e7e:	4413      	add	r3, r2
 8001e80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e88:	2200      	movs	r2, #0
 8001e8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f004 fc83 	bl	800679e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8104 	bne.w	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8013      	strh	r3, [r2, #0]
 8001ee8:	e0e0      	b.n	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	441a      	add	r2, r3
 8001f20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	f040 80b4 	bne.w	80020ac <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f4c:	441a      	add	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d309      	bcc.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	e015      	b.n	8001fac <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001f88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f96:	e009      	b.n	8001fac <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d155      	bne.n	8002066 <HAL_PCD_EP_DB_Transmit+0x704>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fce:	4413      	add	r3, r2
 8001fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	011a      	lsls	r2, r3, #4
 8001fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fda:	4413      	add	r3, r2
 8001fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fe0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d112      	bne.n	800200e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff6:	801a      	strh	r2, [r3, #0]
 8001ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002006:	b29a      	uxth	r2, r3
 8002008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	e044      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x736>
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002010:	2b3e      	cmp	r3, #62	; 0x3e
 8002012:	d811      	bhi.n	8002038 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	657b      	str	r3, [r7, #84]	; 0x54
 800201a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	3301      	adds	r3, #1
 8002028:	657b      	str	r3, [r7, #84]	; 0x54
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	b29b      	uxth	r3, r3
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	b29a      	uxth	r2, r3
 8002032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	e02f      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x736>
 8002038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	657b      	str	r3, [r7, #84]	; 0x54
 800203e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204a:	3b01      	subs	r3, #1
 800204c:	657b      	str	r3, [r7, #84]	; 0x54
 800204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002050:	b29b      	uxth	r3, r3
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	b29b      	uxth	r3, r3
 8002056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205e:	b29a      	uxth	r2, r3
 8002060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002062:	801a      	strh	r2, [r3, #0]
 8002064:	e018      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0x736>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	785b      	ldrb	r3, [r3, #1]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d114      	bne.n	8002098 <HAL_PCD_EP_DB_Transmit+0x736>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800207c:	4413      	add	r3, r2
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	011a      	lsls	r2, r3, #4
 8002086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002088:	4413      	add	r3, r2
 800208a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800208e:	663b      	str	r3, [r7, #96]	; 0x60
 8002090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002092:	b29a      	uxth	r2, r3
 8002094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002096:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6959      	ldr	r1, [r3, #20]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	895a      	ldrh	r2, [r3, #10]
 80020a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f003 fae6 	bl	8005678 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c6:	823b      	strh	r3, [r7, #16]
 80020c8:	8a3b      	ldrh	r3, [r7, #16]
 80020ca:	f083 0310 	eor.w	r3, r3, #16
 80020ce:	823b      	strh	r3, [r7, #16]
 80020d0:	8a3b      	ldrh	r3, [r7, #16]
 80020d2:	f083 0320 	eor.w	r3, r3, #32
 80020d6:	823b      	strh	r3, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	8a3b      	ldrh	r3, [r7, #16]
 80020e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3788      	adds	r7, #136	; 0x88
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e272      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8087 	beq.w	8002236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002128:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b04      	cmp	r3, #4
 8002132:	d00c      	beq.n	800214e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002134:	4b8f      	ldr	r3, [pc, #572]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d112      	bne.n	8002166 <HAL_RCC_OscConfig+0x5e>
 8002140:	4b8c      	ldr	r3, [pc, #560]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d10b      	bne.n	8002166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214e:	4b89      	ldr	r3, [pc, #548]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d06c      	beq.n	8002234 <HAL_RCC_OscConfig+0x12c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d168      	bne.n	8002234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e24c      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x76>
 8002170:	4b80      	ldr	r3, [pc, #512]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a7f      	ldr	r2, [pc, #508]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	e02e      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7a      	ldr	r2, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b78      	ldr	r3, [pc, #480]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a77      	ldr	r2, [pc, #476]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0xbc>
 80021aa:	4b72      	ldr	r3, [pc, #456]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a71      	ldr	r2, [pc, #452]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6e      	ldr	r2, [pc, #440]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xd4>
 80021c4:	4b6b      	ldr	r3, [pc, #428]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a6a      	ldr	r2, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a67      	ldr	r2, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fa1c 	bl	8000620 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe fa18 	bl	8000620 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e200      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xe4>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fa08 	bl	8000620 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fa04 	bl	8000620 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1ec      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x10c>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x18c>
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x176>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c0      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4939      	ldr	r1, [pc, #228]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7fe f9bd 	bl	8000620 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe f9b9 	bl	8000620 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1a1      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4927      	ldr	r1, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe f99c 	bl	8000620 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe f998 	bl	8000620 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e180      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03a      	beq.n	800238c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d019      	beq.n	8002352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_RCC_OscConfig+0x274>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe f97c 	bl	8000620 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe f978 	bl	8000620 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e160      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f000 faa6 	bl	800289c <RCC_Delay>
 8002350:	e01c      	b.n	800238c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_OscConfig+0x274>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe f962 	bl	8000620 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235e:	e00f      	b.n	8002380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe f95e 	bl	8000620 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d908      	bls.n	8002380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e146      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	42420000 	.word	0x42420000
 800237c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b92      	ldr	r3, [pc, #584]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e9      	bne.n	8002360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a6 	beq.w	80024e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a87      	ldr	r2, [pc, #540]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7e      	ldr	r2, [pc, #504]	; (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe f91f 	bl	8000620 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe f91b 	bl	8000620 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b64      	cmp	r3, #100	; 0x64
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e103      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <HAL_RCC_OscConfig+0x4c8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x312>
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	e02d      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x334>
 8002422:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a69      	ldr	r2, [pc, #420]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b67      	ldr	r3, [pc, #412]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a66      	ldr	r2, [pc, #408]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	e01c      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b05      	cmp	r3, #5
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x356>
 8002444:	4b61      	ldr	r3, [pc, #388]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a60      	ldr	r2, [pc, #384]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	4b5e      	ldr	r3, [pc, #376]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a5d      	ldr	r2, [pc, #372]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	e00b      	b.n	8002476 <HAL_RCC_OscConfig+0x36e>
 800245e:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a5a      	ldr	r2, [pc, #360]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	4b58      	ldr	r3, [pc, #352]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a57      	ldr	r2, [pc, #348]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe f8cf 	bl	8000620 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe f8cb 	bl	8000620 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	; 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0b1      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ee      	beq.n	8002486 <HAL_RCC_OscConfig+0x37e>
 80024a8:	e014      	b.n	80024d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe f8b9 	bl	8000620 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe f8b5 	bl	8000620 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e09b      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	4b40      	ldr	r3, [pc, #256]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ee      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d061      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d146      	bne.n	8002592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe f889 	bl	8000620 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe f885 	bl	8000620 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e06d      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	4b29      	ldr	r3, [pc, #164]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002538:	d108      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4921      	ldr	r1, [pc, #132]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a19      	ldr	r1, [r3, #32]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	430b      	orrs	r3, r1
 800255e:	491b      	ldr	r1, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_OscConfig+0x4cc>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe f859 	bl	8000620 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe f855 	bl	8000620 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e03d      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x46a>
 8002590:	e035      	b.n	80025fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_RCC_OscConfig+0x4cc>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe f842 	bl	8000620 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe f83e 	bl	8000620 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e026      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x498>
 80025be:	e01e      	b.n	80025fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e019      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
 80025d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x500>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d0      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4965      	ldr	r1, [pc, #404]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800268a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d040      	beq.n	800272c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e073      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06b      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4936      	ldr	r1, [pc, #216]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026fc:	f7fd ff90 	bl	8000620 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fd ff8c 	bl	8000620 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e053      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d210      	bcs.n	800275c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4922      	ldr	r1, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f821 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1cc>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd feee 	bl	800059c <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08006b40 	.word	0x08006b40
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b490      	push	{r4, r7}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_GetSysClockFreq+0xac>)
 80027e8:	1d3c      	adds	r4, r7, #4
 80027ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027f0:	f240 2301 	movw	r3, #513	; 0x201
 80027f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb0>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x40>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x46>
 800281e:	e02b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	e02b      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3328      	adds	r3, #40	; 0x28
 8002830:	443b      	add	r3, r7
 8002832:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002836:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0c5b      	lsrs	r3, r3, #17
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	3328      	adds	r3, #40	; 0x28
 800284e:	443b      	add	r3, r7
 8002850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002854:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285a:	fb03 f202 	mul.w	r2, r3, r2
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	e004      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	623b      	str	r3, [r7, #32]
      break;
 8002876:	e002      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800287a:	623b      	str	r3, [r7, #32]
      break;
 800287c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287e:	6a3b      	ldr	r3, [r7, #32]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bc90      	pop	{r4, r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	08006b30 	.word	0x08006b30
 8002890:	40021000 	.word	0x40021000
 8002894:	007a1200 	.word	0x007a1200
 8002898:	003d0900 	.word	0x003d0900

0800289c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCC_Delay+0x34>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <RCC_Delay+0x38>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b8:	bf00      	nop
  }
  while (Delay --);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <RCC_Delay+0x1c>
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000000 	.word	0x20000000
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d07d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f8:	4b4f      	ldr	r3, [pc, #316]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	61d3      	str	r3, [r2, #28]
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d118      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292c:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a42      	ldr	r2, [pc, #264]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002938:	f7fd fe72 	bl	8000620 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	e008      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002940:	f7fd fe6e 	bl	8000620 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e06d      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02e      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d027      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297c:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d014      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fd fe3d 	bl	8000620 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fd fe39 	bl	8000620 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e036      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4917      	ldr	r1, [pc, #92]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	490b      	ldr	r1, [pc, #44]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4904      	ldr	r1, [pc, #16]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42420440 	.word	0x42420440

08002a44 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e041      	b.n	8002adc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d106      	bne.n	8002a72 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f839 	bl	8002ae4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f000 f94f 	bl	8002d28 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0208 	bic.w	r2, r2, #8
 8002a98:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b20:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d105      	bne.n	8002b3a <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b2e:	7b7b      	ldrb	r3, [r7, #13]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b34:	7b3b      	ldrb	r3, [r7, #12]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e02b      	b.n	8002b96 <HAL_TIM_OnePulse_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa96 	bl	8003098 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	2104      	movs	r1, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fa8f 	bl	8003098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_TIM_OnePulse_Start+0xa8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_OnePulse_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40012c00 	.word	0x40012c00

08002ba4 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	; 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f000 80b1 	beq.w	8002d1e <HAL_TIM_OnePulse_ConfigChannel+0x17a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0aa      	b.n	8002d20 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_TIM_OnePulse_ConfigChannel+0x68>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d009      	beq.n	8002c1e <HAL_TIM_OnePulse_ConfigChannel+0x7a>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 8002c0a:	e011      	b.n	8002c30 <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f107 0214 	add.w	r2, r7, #20
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f8de 	bl	8002dd8 <TIM_OC1_SetConfig>
        break;
 8002c1c:	e008      	b.n	8002c30 <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f107 0214 	add.w	r2, r7, #20
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f93b 	bl	8002ea4 <TIM_OC2_SetConfig>
        break;
 8002c2e:	bf00      	nop
    }

    switch (InputChannel)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_OnePulse_ConfigChannel+0x9a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d033      	beq.n	8002ca4 <HAL_TIM_OnePulse_ConfigChannel+0x100>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 8002c3c:	e065      	b.n	8002d0a <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6999      	ldr	r1, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f000 f993 	bl	8002f78 <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020c 	bic.w	r2, r2, #12
 8002c60:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c70:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8002c80:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0207 	bic.w	r2, r2, #7
 8002c90:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0206 	orr.w	r2, r2, #6
 8002ca0:	609a      	str	r2, [r3, #8]
        break;
 8002ca2:	e032      	b.n	8002d0a <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6999      	ldr	r1, [r3, #24]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f000 f9b4 	bl	8003020 <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002cc6:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cd6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002ce6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0207 	bic.w	r2, r2, #7
 8002cf6:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0206 	orr.w	r2, r2, #6
 8002d06:	609a      	str	r2, [r3, #8]
        break;
 8002d08:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
  }
  else
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
  }
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3730      	adds	r7, #48	; 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <TIM_Base_SetConfig+0xa8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0x28>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0x28>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <TIM_Base_SetConfig+0xac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <TIM_Base_SetConfig+0xa8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_Base_SetConfig+0x52>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x52>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <TIM_Base_SetConfig+0xac>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <TIM_Base_SetConfig+0xa8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d103      	bne.n	8002dc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	615a      	str	r2, [r3, #20]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400

08002dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 0302 	bic.w	r3, r3, #2
 8002e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <TIM_OC1_SetConfig+0xc8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0308 	bic.w	r3, r3, #8
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <TIM_OC1_SetConfig+0xc8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d111      	bne.n	8002e7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40012c00 	.word	0x40012c00

08002ea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0320 	bic.w	r3, r3, #32
 8002eee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <TIM_OC2_SetConfig+0xd0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10d      	bne.n	8002f20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <TIM_OC2_SetConfig+0xd0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d113      	bne.n	8002f50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00

08002f78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <TIM_TI1_SetConfig+0xa0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_TI1_SetConfig+0x3e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d003      	beq.n	8002fb6 <TIM_TI1_SetConfig+0x3e>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	; (800301c <TIM_TI1_SetConfig+0xa4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <TIM_TI1_SetConfig+0x42>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <TIM_TI1_SetConfig+0x44>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0303 	bic.w	r3, r3, #3
 8002fc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e003      	b.n	8002fda <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f023 030a 	bic.w	r3, r3, #10
 8002ff4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 030a 	and.w	r3, r3, #10
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	621a      	str	r2, [r3, #32]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40000400 	.word	0x40000400

08003020 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0210 	bic.w	r2, r3, #16
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	031b      	lsls	r3, r3, #12
 8003064:	b29b      	uxth	r3, r3
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003072:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	401a      	ands	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b09b      	sub	sp, #108	; 0x6c
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	78db      	ldrb	r3, [r3, #3]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d81f      	bhi.n	8003152 <USB_ActivateEndpoint+0x72>
 8003112:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <USB_ActivateEndpoint+0x38>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	08003129 	.word	0x08003129
 800311c:	08003145 	.word	0x08003145
 8003120:	0800315b 	.word	0x0800315b
 8003124:	08003137 	.word	0x08003137
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003128:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800312c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003130:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003134:	e012      	b.n	800315c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003136:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800313a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800313e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003142:	e00b      	b.n	800315c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003144:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003150:	e004      	b.n	800315c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003158:	e000      	b.n	800315c <USB_ActivateEndpoint+0x7c>
      break;
 800315a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800316a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	b29a      	uxth	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	7b1b      	ldrb	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8149 	bne.w	8003460 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 8084 	beq.w	80032e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	4413      	add	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	011a      	lsls	r2, r3, #4
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	88db      	ldrh	r3, [r3, #6]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	b29b      	uxth	r3, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	81fb      	strh	r3, [r7, #14]
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <USB_ActivateEndpoint+0x17c>
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	81bb      	strh	r3, [r7, #12]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	89bb      	ldrh	r3, [r7, #12]
 8003248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003258:	b29b      	uxth	r3, r3
 800325a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	78db      	ldrb	r3, [r3, #3]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d020      	beq.n	80032a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327a:	813b      	strh	r3, [r7, #8]
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	f083 0320 	eor.w	r3, r3, #32
 8003282:	813b      	strh	r3, [r7, #8]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	893b      	ldrh	r3, [r7, #8]
 8003290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]
 80032a4:	e27f      	b.n	80037a6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032bc:	817b      	strh	r3, [r7, #10]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	441a      	add	r2, r3
 80032c8:	897b      	ldrh	r3, [r7, #10]
 80032ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
 80032de:	e262      	b.n	80037a6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	4413      	add	r3, r2
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	011a      	lsls	r2, r3, #4
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	88db      	ldrh	r3, [r3, #6]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	4413      	add	r3, r2
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	011a      	lsls	r2, r3, #4
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	4413      	add	r3, r2
 8003332:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d112      	bne.n	8003366 <USB_ActivateEndpoint+0x286>
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800334a:	b29a      	uxth	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	801a      	strh	r2, [r3, #0]
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800335e:	b29a      	uxth	r2, r3
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	e02f      	b.n	80033c6 <USB_ActivateEndpoint+0x2e6>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b3e      	cmp	r3, #62	; 0x3e
 800336c:	d813      	bhi.n	8003396 <USB_ActivateEndpoint+0x2b6>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	663b      	str	r3, [r7, #96]	; 0x60
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <USB_ActivateEndpoint+0x2a8>
 8003382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003384:	3301      	adds	r3, #1
 8003386:	663b      	str	r3, [r7, #96]	; 0x60
 8003388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800338a:	b29b      	uxth	r3, r3
 800338c:	029b      	lsls	r3, r3, #10
 800338e:	b29a      	uxth	r2, r3
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	801a      	strh	r2, [r3, #0]
 8003394:	e017      	b.n	80033c6 <USB_ActivateEndpoint+0x2e6>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	663b      	str	r3, [r7, #96]	; 0x60
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <USB_ActivateEndpoint+0x2d0>
 80033aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ac:	3b01      	subs	r3, #1
 80033ae:	663b      	str	r3, [r7, #96]	; 0x60
 80033b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	83fb      	strh	r3, [r7, #30]
 80033d4:	8bfb      	ldrh	r3, [r7, #30]
 80033d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01b      	beq.n	8003416 <USB_ActivateEndpoint+0x336>
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f4:	83bb      	strh	r3, [r7, #28]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	441a      	add	r2, r3
 8003400:	8bbb      	ldrh	r3, [r7, #28]
 8003402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342c:	837b      	strh	r3, [r7, #26]
 800342e:	8b7b      	ldrh	r3, [r7, #26]
 8003430:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003434:	837b      	strh	r3, [r7, #26]
 8003436:	8b7b      	ldrh	r3, [r7, #26]
 8003438:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800343c:	837b      	strh	r3, [r7, #26]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	8b7b      	ldrh	r3, [r7, #26]
 800344a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345a:	b29b      	uxth	r3, r3
 800345c:	8013      	strh	r3, [r2, #0]
 800345e:	e1a2      	b.n	80037a6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003490:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	b29b      	uxth	r3, r3
 800349a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	65bb      	str	r3, [r7, #88]	; 0x58
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034ac:	4413      	add	r3, r2
 80034ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	011a      	lsls	r2, r3, #4
 80034b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034be:	657b      	str	r3, [r7, #84]	; 0x54
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	891b      	ldrh	r3, [r3, #8]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	653b      	str	r3, [r7, #80]	; 0x50
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e0:	4413      	add	r3, r2
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	011a      	lsls	r2, r3, #4
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80034f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	895b      	ldrh	r3, [r3, #10]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003502:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8091 	bne.w	8003630 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800351c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01b      	beq.n	800355e <USB_ActivateEndpoint+0x47e>
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	441a      	add	r2, r3
 8003548:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800354a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800354e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355a:	b29b      	uxth	r3, r3
 800355c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	873b      	strh	r3, [r7, #56]	; 0x38
 800356c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01b      	beq.n	80035ae <USB_ActivateEndpoint+0x4ce>
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	441a      	add	r2, r3
 8003598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800359a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800359e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80035c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80035ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	441a      	add	r2, r3
 80035e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80035e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360c:	867b      	strh	r3, [r7, #50]	; 0x32
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800361a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]
 800362e:	e0ba      	b.n	80037a6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003640:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01d      	beq.n	8003688 <USB_ActivateEndpoint+0x5a8>
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003684:	b29b      	uxth	r3, r3
 8003686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003698:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800369c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01d      	beq.n	80036e0 <USB_ActivateEndpoint+0x600>
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036dc:	b29b      	uxth	r3, r3
 80036de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d024      	beq.n	8003732 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003706:	f083 0320 	eor.w	r3, r3, #32
 800370a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800371c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372c:	b29b      	uxth	r3, r3
 800372e:	8013      	strh	r3, [r2, #0]
 8003730:	e01d      	b.n	800376e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003748:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	441a      	add	r2, r3
 8003790:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80037a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	376c      	adds	r7, #108	; 0x6c
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b0cc      	sub	sp, #304	; 0x130
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037c2:	6018      	str	r0, [r3, #0]
 80037c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037cc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f041 817d 	bne.w	8004ada <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d908      	bls.n	800380e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80037fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800380c:	e007      	b.n	800381e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800380e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800381e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	7b1b      	ldrb	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d152      	bne.n	80038d4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800382e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6959      	ldr	r1, [r3, #20]
 800383a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800383e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	88da      	ldrh	r2, [r3, #6]
 8003846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800384a:	b29b      	uxth	r3, r3
 800384c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003850:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003854:	6800      	ldr	r0, [r0, #0]
 8003856:	f001 ff0f 	bl	8005678 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800385a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800385e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003866:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387c:	b29b      	uxth	r3, r3
 800387e:	4619      	mov	r1, r3
 8003880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003884:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003888:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800388c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	440a      	add	r2, r1
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800389a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	011a      	lsls	r2, r3, #4
 80038a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80038b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	f001 b8b5 	b.w	8004a3e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80038d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	78db      	ldrb	r3, [r3, #3]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f040 84c6 	bne.w	8004272 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80038e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	f240 8443 	bls.w	800418a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800392e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800393c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800394c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003954:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395c:	b29b      	uxth	r3, r3
 800395e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a1a      	ldr	r2, [r3, #32]
 800396c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800397e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800398c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 823e 	beq.w	8003e22 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80039b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 809a 	bne.w	8003b00 <USB_EPStartXfer+0x34c>
 80039cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80039d8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80039fe:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	440a      	add	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	011a      	lsls	r2, r3, #4
 8003a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d122      	bne.n	8003a7e <USB_EPStartXfer+0x2ca>
 8003a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	e079      	b.n	8003b72 <USB_EPStartXfer+0x3be>
 8003a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a82:	2b3e      	cmp	r3, #62	; 0x3e
 8003a84:	d81b      	bhi.n	8003abe <USB_EPStartXfer+0x30a>
 8003a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d004      	beq.n	8003aa6 <USB_EPStartXfer+0x2f2>
 8003a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003aa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	029b      	lsls	r3, r3, #10
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	801a      	strh	r2, [r3, #0]
 8003abc:	e059      	b.n	8003b72 <USB_EPStartXfer+0x3be>
 8003abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <USB_EPStartXfer+0x32a>
 8003ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003af6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	e038      	b.n	8003b72 <USB_EPStartXfer+0x3be>
 8003b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d130      	bne.n	8003b72 <USB_EPStartXfer+0x3be>
 8003b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003b2e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	440a      	add	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	011a      	lsls	r2, r3, #4
 8003b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8003b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	895b      	ldrh	r3, [r3, #10]
 8003b7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6959      	ldr	r1, [r3, #20]
 8003b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003b98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003b9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003ba0:	6800      	ldr	r0, [r0, #0]
 8003ba2:	f001 fd69 	bl	8005678 <USB_WritePMA>
            ep->xfer_buff += len;
 8003ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bb6:	441a      	add	r2, r3
 8003bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d90f      	bls.n	8003c00 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8003be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf0:	1ad2      	subs	r2, r2, r3
 8003bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	621a      	str	r2, [r3, #32]
 8003bfe:	e00e      	b.n	8003c1e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	785b      	ldrb	r3, [r3, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 809a 	bne.w	8003d64 <USB_EPStartXfer+0x5b0>
 8003c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003c3c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003c62:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	440a      	add	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011a      	lsls	r2, r3, #4
 8003c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c7e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d122      	bne.n	8003ce2 <USB_EPStartXfer+0x52e>
 8003c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ca0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	e083      	b.n	8003dea <USB_EPStartXfer+0x636>
 8003ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ce8:	d81b      	bhi.n	8003d22 <USB_EPStartXfer+0x56e>
 8003cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <USB_EPStartXfer+0x556>
 8003d00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d04:	3301      	adds	r3, #1
 8003d06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	029b      	lsls	r3, r3, #10
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	801a      	strh	r2, [r3, #0]
 8003d20:	e063      	b.n	8003dea <USB_EPStartXfer+0x636>
 8003d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <USB_EPStartXfer+0x58e>
 8003d38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	801a      	strh	r2, [r3, #0]
 8003d62:	e042      	b.n	8003dea <USB_EPStartXfer+0x636>
 8003d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d13a      	bne.n	8003dea <USB_EPStartXfer+0x636>
 8003d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003d7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003d80:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003da2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003da6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	440a      	add	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	011a      	lsls	r2, r3, #4
 8003dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dc2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003de2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	891b      	ldrh	r3, [r3, #8]
 8003df6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6959      	ldr	r1, [r3, #20]
 8003e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003e10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003e14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003e18:	6800      	ldr	r0, [r0, #0]
 8003e1a:	f001 fc2d 	bl	8005678 <USB_WritePMA>
 8003e1e:	f000 be0e 	b.w	8004a3e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d16d      	bne.n	8003f0e <USB_EPStartXfer+0x75a>
 8003e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e52:	4413      	add	r3, r2
 8003e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	011a      	lsls	r2, r3, #4
 8003e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e66:	4413      	add	r3, r2
 8003e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d112      	bne.n	8003e9c <USB_EPStartXfer+0x6e8>
 8003e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	e063      	b.n	8003f64 <USB_EPStartXfer+0x7b0>
 8003e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8003ea2:	d817      	bhi.n	8003ed4 <USB_EPStartXfer+0x720>
 8003ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <USB_EPStartXfer+0x710>
 8003eba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ec4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	029b      	lsls	r3, r3, #10
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e047      	b.n	8003f64 <USB_EPStartXfer+0x7b0>
 8003ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <USB_EPStartXfer+0x740>
 8003eea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	029b      	lsls	r3, r3, #10
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	e02a      	b.n	8003f64 <USB_EPStartXfer+0x7b0>
 8003f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d122      	bne.n	8003f64 <USB_EPStartXfer+0x7b0>
 8003f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	653b      	str	r3, [r7, #80]	; 0x50
 8003f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3e:	4413      	add	r3, r2
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 8003f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	011a      	lsls	r2, r3, #4
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	4413      	add	r3, r2
 8003f54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	891b      	ldrh	r3, [r3, #8]
 8003f70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6959      	ldr	r1, [r3, #20]
 8003f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003f8a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003f8e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8003f92:	6800      	ldr	r0, [r0, #0]
 8003f94:	f001 fb70 	bl	8005678 <USB_WritePMA>
            ep->xfer_buff += len;
 8003f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa8:	441a      	add	r2, r3
 8003faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d90f      	bls.n	8003ff2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8003fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe2:	1ad2      	subs	r2, r2, r3
 8003fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	621a      	str	r2, [r3, #32]
 8003ff0:	e00e      	b.n	8004010 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8003ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
 800401c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d16d      	bne.n	8004108 <USB_EPStartXfer+0x954>
 800402c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
 8004038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800403c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	4413      	add	r3, r2
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	011a      	lsls	r2, r3, #4
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	4413      	add	r3, r2
 8004062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
 8004068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d112      	bne.n	8004096 <USB_EPStartXfer+0x8e2>
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800407a:	b29a      	uxth	r2, r3
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408e:	b29a      	uxth	r2, r3
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	801a      	strh	r2, [r3, #0]
 8004094:	e05d      	b.n	8004152 <USB_EPStartXfer+0x99e>
 8004096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409a:	2b3e      	cmp	r3, #62	; 0x3e
 800409c:	d817      	bhi.n	80040ce <USB_EPStartXfer+0x91a>
 800409e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <USB_EPStartXfer+0x90a>
 80040b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	e041      	b.n	8004152 <USB_EPStartXfer+0x99e>
 80040ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <USB_EPStartXfer+0x93a>
 80040e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040e8:	3b01      	subs	r3, #1
 80040ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004100:	b29a      	uxth	r2, r3
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e024      	b.n	8004152 <USB_EPStartXfer+0x99e>
 8004108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d11c      	bne.n	8004152 <USB_EPStartXfer+0x99e>
 8004118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412c:	4413      	add	r3, r2
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
 8004130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011a      	lsls	r2, r3, #4
 800413e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004140:	4413      	add	r3, r2
 8004142:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800414c:	b29a      	uxth	r2, r3
 800414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004150:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	895b      	ldrh	r3, [r3, #10]
 800415e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6959      	ldr	r1, [r3, #20]
 800416e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004172:	b29b      	uxth	r3, r3
 8004174:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004178:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800417c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004180:	6800      	ldr	r0, [r0, #0]
 8004182:	f001 fa79 	bl	8005678 <USB_WritePMA>
 8004186:	f000 bc5a 	b.w	8004a3e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800418a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800419a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800419e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80041c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80041e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004210:	b29b      	uxth	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004216:	4413      	add	r3, r2
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800421a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800421e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	011a      	lsls	r2, r3, #4
 8004228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422a:	4413      	add	r3, r2
 800422c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004230:	65bb      	str	r3, [r7, #88]	; 0x58
 8004232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004236:	b29a      	uxth	r2, r3
 8004238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800423c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	891b      	ldrh	r3, [r3, #8]
 8004248:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800424c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6959      	ldr	r1, [r3, #20]
 8004258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425c:	b29b      	uxth	r3, r3
 800425e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004262:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004266:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	f001 fa04 	bl	8005678 <USB_WritePMA>
 8004270:	e3e5      	b.n	8004a3e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800429c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80042ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 81bc 	beq.w	800468c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d16d      	bne.n	800440e <USB_EPStartXfer+0xc5a>
 8004332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	67bb      	str	r3, [r7, #120]	; 0x78
 800433e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434c:	b29b      	uxth	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004352:	4413      	add	r3, r2
 8004354:	67bb      	str	r3, [r7, #120]	; 0x78
 8004356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800435a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	011a      	lsls	r2, r3, #4
 8004364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004366:	4413      	add	r3, r2
 8004368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800436c:	677b      	str	r3, [r7, #116]	; 0x74
 800436e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d112      	bne.n	800439c <USB_EPStartXfer+0xbe8>
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004380:	b29a      	uxth	r2, r3
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e060      	b.n	800445e <USB_EPStartXfer+0xcaa>
 800439c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a0:	2b3e      	cmp	r3, #62	; 0x3e
 80043a2:	d817      	bhi.n	80043d4 <USB_EPStartXfer+0xc20>
 80043a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80043ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <USB_EPStartXfer+0xc10>
 80043ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043be:	3301      	adds	r3, #1
 80043c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80043c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	029b      	lsls	r3, r3, #10
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	e044      	b.n	800445e <USB_EPStartXfer+0xcaa>
 80043d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80043de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <USB_EPStartXfer+0xc40>
 80043ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80043f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004406:	b29a      	uxth	r2, r3
 8004408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	e027      	b.n	800445e <USB_EPStartXfer+0xcaa>
 800440e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	785b      	ldrb	r3, [r3, #1]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d11f      	bne.n	800445e <USB_EPStartXfer+0xcaa>
 800441e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442c:	b29b      	uxth	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004434:	4413      	add	r3, r2
 8004436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800443a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	011a      	lsls	r2, r3, #4
 8004448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800444c:	4413      	add	r3, r2
 800444e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004452:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004458:	b29a      	uxth	r2, r3
 800445a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800445c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800445e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004462:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	895b      	ldrh	r3, [r3, #10]
 800446a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800446e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6959      	ldr	r1, [r3, #20]
 800447a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800447e:	b29b      	uxth	r3, r3
 8004480:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004484:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004488:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f001 f8f3 	bl	8005678 <USB_WritePMA>
          ep->xfer_buff += len;
 8004492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044a2:	441a      	add	r2, r3
 80044a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80044b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d90f      	bls.n	80044ec <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1a      	ldr	r2, [r3, #32]
 80044d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044dc:	1ad2      	subs	r2, r2, r3
 80044de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	621a      	str	r2, [r3, #32]
 80044ea:	e00e      	b.n	800450a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80044ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80044fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800450a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8295 	beq.w	8004a3e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d16d      	bne.n	8004600 <USB_EPStartXfer+0xe4c>
 8004524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453e:	b29b      	uxth	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004544:	4413      	add	r3, r2
 8004546:	66bb      	str	r3, [r7, #104]	; 0x68
 8004548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	011a      	lsls	r2, r3, #4
 8004556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004558:	4413      	add	r3, r2
 800455a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800455e:	667b      	str	r3, [r7, #100]	; 0x64
 8004560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d112      	bne.n	800458e <USB_EPStartXfer+0xdda>
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004572:	b29a      	uxth	r2, r3
 8004574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004586:	b29a      	uxth	r2, r3
 8004588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e063      	b.n	8004656 <USB_EPStartXfer+0xea2>
 800458e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004592:	2b3e      	cmp	r3, #62	; 0x3e
 8004594:	d817      	bhi.n	80045c6 <USB_EPStartXfer+0xe12>
 8004596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80045a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <USB_EPStartXfer+0xe02>
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	3301      	adds	r3, #1
 80045b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	029b      	lsls	r3, r3, #10
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e047      	b.n	8004656 <USB_EPStartXfer+0xea2>
 80045c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80045d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <USB_EPStartXfer+0xe32>
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e0:	3b01      	subs	r3, #1
 80045e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	e02a      	b.n	8004656 <USB_EPStartXfer+0xea2>
 8004600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d122      	bne.n	8004656 <USB_EPStartXfer+0xea2>
 8004610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	673b      	str	r3, [r7, #112]	; 0x70
 800461c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004630:	4413      	add	r3, r2
 8004632:	673b      	str	r3, [r7, #112]	; 0x70
 8004634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	011a      	lsls	r2, r3, #4
 8004642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004644:	4413      	add	r3, r2
 8004646:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800464a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004650:	b29a      	uxth	r2, r3
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	891b      	ldrh	r3, [r3, #8]
 8004662:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6959      	ldr	r1, [r3, #20]
 8004672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004676:	b29b      	uxth	r3, r3
 8004678:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800467c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004680:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004684:	6800      	ldr	r0, [r0, #0]
 8004686:	f000 fff7 	bl	8005678 <USB_WritePMA>
 800468a:	e1d8      	b.n	8004a3e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800468c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d178      	bne.n	800478e <USB_EPStartXfer+0xfda>
 800469c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c0:	4413      	add	r3, r2
 80046c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	011a      	lsls	r2, r3, #4
 80046d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d8:	4413      	add	r3, r2
 80046da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <USB_EPStartXfer+0xf64>
 80046ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800470e:	b29a      	uxth	r2, r3
 8004710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	e06b      	b.n	80047f0 <USB_EPStartXfer+0x103c>
 8004718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800471c:	2b3e      	cmp	r3, #62	; 0x3e
 800471e:	d818      	bhi.n	8004752 <USB_EPStartXfer+0xf9e>
 8004720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800472a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <USB_EPStartXfer+0xf8c>
 8004736:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800473a:	3301      	adds	r3, #1
 800473c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004740:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004744:	b29b      	uxth	r3, r3
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	b29a      	uxth	r2, r3
 800474a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e04e      	b.n	80047f0 <USB_EPStartXfer+0x103c>
 8004752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800475c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <USB_EPStartXfer+0xfbe>
 8004768:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800476c:	3b01      	subs	r3, #1
 800476e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004772:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004776:	b29b      	uxth	r3, r3
 8004778:	029b      	lsls	r3, r3, #10
 800477a:	b29b      	uxth	r3, r3
 800477c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004784:	b29a      	uxth	r2, r3
 8004786:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800478a:	801a      	strh	r2, [r3, #0]
 800478c:	e030      	b.n	80047f0 <USB_EPStartXfer+0x103c>
 800478e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d128      	bne.n	80047f0 <USB_EPStartXfer+0x103c>
 800479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047c2:	4413      	add	r3, r2
 80047c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	011a      	lsls	r2, r3, #4
 80047d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047da:	4413      	add	r3, r2
 80047dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80047f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	891b      	ldrh	r3, [r3, #8]
 80047fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6959      	ldr	r1, [r3, #20]
 800480c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004810:	b29b      	uxth	r3, r3
 8004812:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004816:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800481a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800481e:	6800      	ldr	r0, [r0, #0]
 8004820:	f000 ff2a 	bl	8005678 <USB_WritePMA>
          ep->xfer_buff += len;
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004834:	441a      	add	r2, r3
 8004836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d90f      	bls.n	800487e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800485e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	621a      	str	r2, [r3, #32]
 800487c:	e00e      	b.n	800489c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800489c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80cc 	beq.w	8004a3e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d178      	bne.n	80049b6 <USB_EPStartXfer+0x1202>
 80048c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e8:	4413      	add	r3, r2
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	011a      	lsls	r2, r3, #4
 80048fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004900:	4413      	add	r3, r2
 8004902:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800490a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d116      	bne.n	8004940 <USB_EPStartXfer+0x118c>
 8004912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491e:	b29a      	uxth	r2, r3
 8004920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004936:	b29a      	uxth	r2, r3
 8004938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	e064      	b.n	8004a0a <USB_EPStartXfer+0x1256>
 8004940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004944:	2b3e      	cmp	r3, #62	; 0x3e
 8004946:	d818      	bhi.n	800497a <USB_EPStartXfer+0x11c6>
 8004948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <USB_EPStartXfer+0x11b4>
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	3301      	adds	r3, #1
 8004964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496c:	b29b      	uxth	r3, r3
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	b29a      	uxth	r2, r3
 8004972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	e047      	b.n	8004a0a <USB_EPStartXfer+0x1256>
 800497a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <USB_EPStartXfer+0x11e6>
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	3b01      	subs	r3, #1
 8004996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800499a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e029      	b.n	8004a0a <USB_EPStartXfer+0x1256>
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d121      	bne.n	8004a0a <USB_EPStartXfer+0x1256>
 80049c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049dc:	4413      	add	r3, r2
 80049de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	011a      	lsls	r2, r3, #4
 80049f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049f4:	4413      	add	r3, r2
 80049f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	895b      	ldrh	r3, [r3, #10]
 8004a16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6959      	ldr	r1, [r3, #20]
 8004a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a38:	6800      	ldr	r0, [r0, #0]
 8004a3a:	f000 fe1d 	bl	8005678 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a60:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6c:	8013      	strh	r3, [r2, #0]
 8004a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a72:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004a76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a7a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004a7e:	8812      	ldrh	r2, [r2, #0]
 8004a80:	f082 0210 	eor.w	r2, r2, #16
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004a8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a92:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8004a96:	8812      	ldrh	r2, [r2, #0]
 8004a98:	f082 0220 	eor.w	r2, r2, #32
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004abc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	8013      	strh	r3, [r2, #0]
 8004ad6:	f000 bc9f 	b.w	8005418 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	7b1b      	ldrb	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80ae 	bne.w	8004c48 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d917      	bls.n	8004b38 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8004b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699a      	ldr	r2, [r3, #24]
 8004b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	619a      	str	r2, [r3, #24]
 8004b36:	e00e      	b.n	8004b56 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8004b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	011a      	lsls	r2, r3, #4
 8004b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b92:	4413      	add	r3, r2
 8004b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d116      	bne.n	8004bd2 <USB_EPStartXfer+0x141e>
 8004ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e3e8      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
 8004bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd8:	d818      	bhi.n	8004c0c <USB_EPStartXfer+0x1458>
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <USB_EPStartXfer+0x1446>
 8004bf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e3cb      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
 8004c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <USB_EPStartXfer+0x1478>
 8004c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c26:	3b01      	subs	r3, #1
 8004c28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	e3ad      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	78db      	ldrb	r3, [r3, #3]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	f040 8200 	bne.w	800505a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 8091 	bne.w	8004d8e <USB_EPStartXfer+0x15da>
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c90:	4413      	add	r3, r2
 8004c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	011a      	lsls	r2, r3, #4
 8004ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca8:	4413      	add	r3, r2
 8004caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <USB_EPStartXfer+0x153c>
 8004cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	e083      	b.n	8004df8 <USB_EPStartXfer+0x1644>
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8004cfe:	d820      	bhi.n	8004d42 <USB_EPStartXfer+0x158e>
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <USB_EPStartXfer+0x157c>
 8004d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	e05a      	b.n	8004df8 <USB_EPStartXfer+0x1644>
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <USB_EPStartXfer+0x15be>
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e034      	b.n	8004df8 <USB_EPStartXfer+0x1644>
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12c      	bne.n	8004df8 <USB_EPStartXfer+0x1644>
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	011a      	lsls	r2, r3, #4
 8004dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dda:	4413      	add	r3, r2
 8004ddc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 8091 	bne.w	8004f3a <USB_EPStartXfer+0x1786>
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	011a      	lsls	r2, r3, #4
 8004e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e54:	4413      	add	r3, r2
 8004e56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d116      	bne.n	8004e9c <USB_EPStartXfer+0x16e8>
 8004e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e80:	801a      	strh	r2, [r3, #0]
 8004e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	e07c      	b.n	8004f96 <USB_EPStartXfer+0x17e2>
 8004e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8004eaa:	d820      	bhi.n	8004eee <USB_EPStartXfer+0x173a>
 8004eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <USB_EPStartXfer+0x1728>
 8004ed2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004edc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	029b      	lsls	r3, r3, #10
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	e053      	b.n	8004f96 <USB_EPStartXfer+0x17e2>
 8004eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <USB_EPStartXfer+0x176a>
 8004f14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	029b      	lsls	r3, r3, #10
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e02d      	b.n	8004f96 <USB_EPStartXfer+0x17e2>
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d125      	bne.n	8004f96 <USB_EPStartXfer+0x17e2>
 8004f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f60:	4413      	add	r3, r2
 8004f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	011a      	lsls	r2, r3, #4
 8004f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f78:	4413      	add	r3, r2
 8004f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f94:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 81fe 	beq.w	80053a4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fc8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <USB_EPStartXfer+0x182c>
 8004fd4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004fe0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f040 81db 	bne.w	80053a4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004fee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 81d4 	bne.w	80053a4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	441a      	add	r2, r3
 8005040:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005050:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005054:	b29b      	uxth	r3, r3
 8005056:	8013      	strh	r3, [r2, #0]
 8005058:	e1a4      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800505a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	78db      	ldrb	r3, [r3, #3]
 8005066:	2b01      	cmp	r3, #1
 8005068:	f040 819a 	bne.w	80053a0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800506c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d917      	bls.n	80050b8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	619a      	str	r2, [r3, #24]
 80050b6:	e00e      	b.n	80050d6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d178      	bne.n	80051d8 <USB_EPStartXfer+0x1a24>
 80050e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800510a:	4413      	add	r3, r2
 800510c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	011a      	lsls	r2, r3, #4
 800511e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005122:	4413      	add	r3, r2
 8005124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005128:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800512c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <USB_EPStartXfer+0x19ae>
 8005134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005140:	b29a      	uxth	r2, r3
 8005142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005158:	b29a      	uxth	r2, r3
 800515a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	e06b      	b.n	800523a <USB_EPStartXfer+0x1a86>
 8005162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005166:	2b3e      	cmp	r3, #62	; 0x3e
 8005168:	d818      	bhi.n	800519c <USB_EPStartXfer+0x19e8>
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <USB_EPStartXfer+0x19d6>
 8005180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005184:	3301      	adds	r3, #1
 8005186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29a      	uxth	r2, r3
 8005194:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e04e      	b.n	800523a <USB_EPStartXfer+0x1a86>
 800519c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <USB_EPStartXfer+0x1a08>
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b6:	3b01      	subs	r3, #1
 80051b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e030      	b.n	800523a <USB_EPStartXfer+0x1a86>
 80051d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d128      	bne.n	800523a <USB_EPStartXfer+0x1a86>
 80051e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520c:	4413      	add	r3, r2
 800520e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	011a      	lsls	r2, r3, #4
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005224:	4413      	add	r3, r2
 8005226:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800522a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800522e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005232:	b29a      	uxth	r2, r3
 8005234:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d178      	bne.n	800534a <USB_EPStartXfer+0x1b96>
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527c:	4413      	add	r3, r2
 800527e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	011a      	lsls	r2, r3, #4
 8005290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005294:	4413      	add	r3, r2
 8005296:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800529a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d116      	bne.n	80052d4 <USB_EPStartXfer+0x1b20>
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	e067      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
 80052d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d8:	2b3e      	cmp	r3, #62	; 0x3e
 80052da:	d818      	bhi.n	800530e <USB_EPStartXfer+0x1b5a>
 80052dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <USB_EPStartXfer+0x1b48>
 80052f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f6:	3301      	adds	r3, #1
 80052f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005300:	b29b      	uxth	r3, r3
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	b29a      	uxth	r2, r3
 8005306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	e04a      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
 800530e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <USB_EPStartXfer+0x1b7a>
 8005324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005328:	3b01      	subs	r3, #1
 800532a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800532e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005332:	b29b      	uxth	r3, r3
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	b29b      	uxth	r3, r3
 8005338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005340:	b29a      	uxth	r2, r3
 8005342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e02c      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
 800534a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d124      	bne.n	80053a4 <USB_EPStartXfer+0x1bf0>
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	4413      	add	r3, r2
 8005372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	011a      	lsls	r2, r3, #4
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	4413      	add	r3, r2
 800538a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800538e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005396:	b29a      	uxth	r2, r3
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e001      	b.n	80053a4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e03a      	b.n	800541a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80053ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80053d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80053da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80053de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80053e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d020      	beq.n	8005478 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544c:	81bb      	strh	r3, [r7, #12]
 800544e:	89bb      	ldrh	r3, [r7, #12]
 8005450:	f083 0310 	eor.w	r3, r3, #16
 8005454:	81bb      	strh	r3, [r7, #12]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	89bb      	ldrh	r3, [r7, #12]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]
 8005476:	e01f      	b.n	80054b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	81fb      	strh	r3, [r7, #14]
 8005490:	89fb      	ldrh	r3, [r7, #14]
 8005492:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005496:	81fb      	strh	r3, [r7, #14]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	89fb      	ldrh	r3, [r7, #14]
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	7b1b      	ldrb	r3, [r3, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f040 809d 	bne.w	8005612 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d04c      	beq.n	800557a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	823b      	strh	r3, [r7, #16]
 80054ee:	8a3b      	ldrh	r3, [r7, #16]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <USB_EPClearStall+0x6c>
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	81fb      	strh	r3, [r7, #14]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	89fb      	ldrh	r3, [r7, #14]
 800551c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552c:	b29b      	uxth	r3, r3
 800552e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	78db      	ldrb	r3, [r3, #3]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d06c      	beq.n	8005612 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554e:	81bb      	strh	r3, [r7, #12]
 8005550:	89bb      	ldrh	r3, [r7, #12]
 8005552:	f083 0320 	eor.w	r3, r3, #32
 8005556:	81bb      	strh	r3, [r7, #12]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	89bb      	ldrh	r3, [r7, #12]
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
 8005578:	e04b      	b.n	8005612 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	82fb      	strh	r3, [r7, #22]
 8005588:	8afb      	ldrh	r3, [r7, #22]
 800558a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01b      	beq.n	80055ca <USB_EPClearStall+0x106>
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	82bb      	strh	r3, [r7, #20]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8abb      	ldrh	r3, [r7, #20]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	827b      	strh	r3, [r7, #18]
 80055e2:	8a7b      	ldrh	r3, [r7, #18]
 80055e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055e8:	827b      	strh	r3, [r7, #18]
 80055ea:	8a7b      	ldrh	r3, [r7, #18]
 80055ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055f0:	827b      	strh	r3, [r7, #18]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8a7b      	ldrh	r3, [r7, #18]
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800562a:	78fb      	ldrb	r3, [r7, #3]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005652:	b29b      	uxth	r3, r3
 8005654:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr

08005678 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005678:	b480      	push	{r7}
 800567a:	b08d      	sub	sp, #52	; 0x34
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4611      	mov	r1, r2
 8005684:	461a      	mov	r2, r3
 8005686:	460b      	mov	r3, r1
 8005688:	80fb      	strh	r3, [r7, #6]
 800568a:	4613      	mov	r3, r2
 800568c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800568e:	88bb      	ldrh	r3, [r7, #4]
 8005690:	3301      	adds	r3, #1
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	005a      	lsls	r2, r3, #1
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b0:	e01e      	b.n	80056f0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	3301      	adds	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	3302      	adds	r3, #2
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	3302      	adds	r3, #2
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	3301      	adds	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	3b01      	subs	r3, #1
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1dd      	bne.n	80056b2 <USB_WritePMA+0x3a>
  }
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	3734      	adds	r7, #52	; 0x34
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005702:	b480      	push	{r7}
 8005704:	b08b      	sub	sp, #44	; 0x2c
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	4611      	mov	r1, r2
 800570e:	461a      	mov	r2, r3
 8005710:	460b      	mov	r3, r1
 8005712:	80fb      	strh	r3, [r7, #6]
 8005714:	4613      	mov	r3, r2
 8005716:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005718:	88bb      	ldrh	r3, [r7, #4]
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	005a      	lsls	r2, r3, #1
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005734:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	e01b      	b.n	8005774 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	3302      	adds	r3, #2
 8005748:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3301      	adds	r3, #1
 8005756:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	3302      	adds	r3, #2
 800576c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	3b01      	subs	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e0      	bne.n	800573c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800577a:	88bb      	ldrh	r3, [r7, #4]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	701a      	strb	r2, [r3, #0]
  }
}
 8005796:	bf00      	nop
 8005798:	372c      	adds	r7, #44	; 0x2c
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80057c0:	2302      	movs	r3, #2
 80057c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	4611      	mov	r1, r2
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	78fa      	ldrb	r2, [r7, #3]
 8005808:	4611      	mov	r1, r2
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3

  return USBD_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fed7 	bl	80065de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2b02      	cmp	r3, #2
 8005852:	d016      	beq.n	8005882 <USBD_LL_SetupStage+0x6a>
 8005854:	2b02      	cmp	r3, #2
 8005856:	d81c      	bhi.n	8005892 <USBD_LL_SetupStage+0x7a>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <USBD_LL_SetupStage+0x4a>
 800585c:	2b01      	cmp	r3, #1
 800585e:	d008      	beq.n	8005872 <USBD_LL_SetupStage+0x5a>
 8005860:	e017      	b.n	8005892 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9ca 	bl	8005c04 <USBD_StdDevReq>
      break;
 8005870:	e01a      	b.n	80058a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa2c 	bl	8005cd8 <USBD_StdItfReq>
      break;
 8005880:	e012      	b.n	80058a8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa6c 	bl	8005d68 <USBD_StdEPReq>
      break;
 8005890:	e00a      	b.n	80058a8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005898:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 f811 	bl	80068c8 <USBD_LL_StallEP>
      break;
 80058a6:	bf00      	nop
  }

  return USBD_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	460b      	mov	r3, r1
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d14b      	bne.n	800595e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d134      	bne.n	8005942 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d919      	bls.n	8005918 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	1ad2      	subs	r2, r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d203      	bcs.n	8005906 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005902:	b29b      	uxth	r3, r3
 8005904:	e002      	b.n	800590c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fedf 	bl	80066d4 <USBD_CtlContinueRx>
 8005916:	e038      	b.n	800598a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800592a:	2b03      	cmp	r3, #3
 800592c:	d105      	bne.n	800593a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fedc 	bl	80066f8 <USBD_CtlSendStatus>
 8005940:	e023      	b.n	800598a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005948:	2b05      	cmp	r3, #5
 800594a:	d11e      	bne.n	800598a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005954:	2100      	movs	r1, #0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 ffb6 	bl	80068c8 <USBD_LL_StallEP>
 800595c:	e015      	b.n	800598a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005970:	2b03      	cmp	r3, #3
 8005972:	d108      	bne.n	8005986 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	7afa      	ldrb	r2, [r7, #11]
 800597e:	4611      	mov	r1, r2
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	4798      	blx	r3
 8005984:	e001      	b.n	800598a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005986:	2302      	movs	r3, #2
 8005988:	e000      	b.n	800598c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	460b      	mov	r3, r1
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d17f      	bne.n	8005aa8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3314      	adds	r3, #20
 80059ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d15c      	bne.n	8005a72 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d915      	bls.n	80059f0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	1ad2      	subs	r2, r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fe67 	bl	80066b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059e2:	2300      	movs	r3, #0
 80059e4:	2200      	movs	r2, #0
 80059e6:	2100      	movs	r1, #0
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 f819 	bl	8006a20 <USBD_LL_PrepareReceive>
 80059ee:	e04e      	b.n	8005a8e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	6912      	ldr	r2, [r2, #16]
 80059f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80059fc:	fb01 f202 	mul.w	r2, r1, r2
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11c      	bne.n	8005a40 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d316      	bcc.n	8005a40 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d20f      	bcs.n	8005a40 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a20:	2200      	movs	r2, #0
 8005a22:	2100      	movs	r1, #0
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fe43 	bl	80066b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a32:	2300      	movs	r3, #0
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fff1 	bl	8006a20 <USBD_LL_PrepareReceive>
 8005a3e:	e026      	b.n	8005a8e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d105      	bne.n	8005a62 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 ff2f 	bl	80068c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fe57 	bl	800671e <USBD_CtlReceiveStatus>
 8005a70:	e00d      	b.n	8005a8e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d004      	beq.n	8005a86 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 ff1d 	bl	80068c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d11d      	bne.n	8005ad4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff fe81 	bl	80057a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005aa6:	e015      	b.n	8005ad4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d108      	bne.n	8005ad0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	7afa      	ldrb	r2, [r7, #11]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	4798      	blx	r3
 8005ace:	e001      	b.n	8005ad4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e000      	b.n	8005ad6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ae6:	2340      	movs	r3, #64	; 0x40
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fec5 	bl	800687c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2240      	movs	r2, #64	; 0x40
 8005afe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 feb7 	bl	800687c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6852      	ldr	r2, [r2, #4]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	4611      	mov	r1, r2
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
  }

  return USBD_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d105      	bne.n	8005bc4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d10b      	bne.n	8005bfa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d005      	beq.n	8005c2a <USBD_StdDevReq+0x26>
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d84f      	bhi.n	8005cc2 <USBD_StdDevReq+0xbe>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d009      	beq.n	8005c3a <USBD_StdDevReq+0x36>
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d14b      	bne.n	8005cc2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
      break;
 8005c38:	e048      	b.n	8005ccc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b09      	cmp	r3, #9
 8005c40:	d839      	bhi.n	8005cb6 <USBD_StdDevReq+0xb2>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <USBD_StdDevReq+0x44>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c99 	.word	0x08005c99
 8005c4c:	08005cad 	.word	0x08005cad
 8005c50:	08005cb7 	.word	0x08005cb7
 8005c54:	08005ca3 	.word	0x08005ca3
 8005c58:	08005cb7 	.word	0x08005cb7
 8005c5c:	08005c7b 	.word	0x08005c7b
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005cb7 	.word	0x08005cb7
 8005c68:	08005c8f 	.word	0x08005c8f
 8005c6c:	08005c85 	.word	0x08005c85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9dc 	bl	8006030 <USBD_GetDescriptor>
          break;
 8005c78:	e022      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb3f 	bl	8006300 <USBD_SetAddress>
          break;
 8005c82:	e01d      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fb7e 	bl	8006388 <USBD_SetConfig>
          break;
 8005c8c:	e018      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fc07 	bl	80064a4 <USBD_GetConfig>
          break;
 8005c96:	e013      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fc37 	bl	800650e <USBD_GetStatus>
          break;
 8005ca0:	e00e      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fc65 	bl	8006574 <USBD_SetFeature>
          break;
 8005caa:	e009      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fc74 	bl	800659c <USBD_ClrFeature>
          break;
 8005cb4:	e004      	b.n	8005cc0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fccc 	bl	8006656 <USBD_CtlError>
          break;
 8005cbe:	bf00      	nop
      }
      break;
 8005cc0:	e004      	b.n	8005ccc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fcc6 	bl	8006656 <USBD_CtlError>
      break;
 8005cca:	bf00      	nop
  }

  return ret;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop

08005cd8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d005      	beq.n	8005cfe <USBD_StdItfReq+0x26>
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d82e      	bhi.n	8005d54 <USBD_StdItfReq+0x7c>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <USBD_StdItfReq+0x26>
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d12a      	bne.n	8005d54 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d04:	3b01      	subs	r3, #1
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d81d      	bhi.n	8005d46 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	889b      	ldrh	r3, [r3, #4]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d813      	bhi.n	8005d3c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	88db      	ldrh	r3, [r3, #6]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d110      	bne.n	8005d50 <USBD_StdItfReq+0x78>
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10d      	bne.n	8005d50 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fcdf 	bl	80066f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d3a:	e009      	b.n	8005d50 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fc89 	bl	8006656 <USBD_CtlError>
          break;
 8005d44:	e004      	b.n	8005d50 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fc84 	bl	8006656 <USBD_CtlError>
          break;
 8005d4e:	e000      	b.n	8005d52 <USBD_StdItfReq+0x7a>
          break;
 8005d50:	bf00      	nop
      }
      break;
 8005d52:	e004      	b.n	8005d5e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fc7d 	bl	8006656 <USBD_CtlError>
      break;
 8005d5c:	bf00      	nop
  }

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	889b      	ldrh	r3, [r3, #4]
 8005d7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d84:	2b40      	cmp	r3, #64	; 0x40
 8005d86:	d007      	beq.n	8005d98 <USBD_StdEPReq+0x30>
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	f200 8146 	bhi.w	800601a <USBD_StdEPReq+0x2b2>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <USBD_StdEPReq+0x40>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	f040 8141 	bne.w	800601a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
      break;
 8005da6:	e13d      	b.n	8006024 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d10a      	bne.n	8005dca <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	e12d      	b.n	8006026 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d007      	beq.n	8005de2 <USBD_StdEPReq+0x7a>
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	f300 811b 	bgt.w	800600e <USBD_StdEPReq+0x2a6>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d072      	beq.n	8005ec2 <USBD_StdEPReq+0x15a>
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d03a      	beq.n	8005e56 <USBD_StdEPReq+0xee>
 8005de0:	e115      	b.n	800600e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d002      	beq.n	8005df2 <USBD_StdEPReq+0x8a>
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d015      	beq.n	8005e1c <USBD_StdEPReq+0xb4>
 8005df0:	e02b      	b.n	8005e4a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00c      	beq.n	8005e12 <USBD_StdEPReq+0xaa>
 8005df8:	7bbb      	ldrb	r3, [r7, #14]
 8005dfa:	2b80      	cmp	r3, #128	; 0x80
 8005dfc:	d009      	beq.n	8005e12 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fd60 	bl	80068c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e08:	2180      	movs	r1, #128	; 0x80
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd5c 	bl	80068c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e10:	e020      	b.n	8005e54 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc1e 	bl	8006656 <USBD_CtlError>
              break;
 8005e1a:	e01b      	b.n	8005e54 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	885b      	ldrh	r3, [r3, #2]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10e      	bne.n	8005e42 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <USBD_StdEPReq+0xda>
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d008      	beq.n	8005e42 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	88db      	ldrh	r3, [r3, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fd43 	bl	80068c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fc58 	bl	80066f8 <USBD_CtlSendStatus>

              break;
 8005e48:	e004      	b.n	8005e54 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc02 	bl	8006656 <USBD_CtlError>
              break;
 8005e52:	bf00      	nop
          }
          break;
 8005e54:	e0e0      	b.n	8006018 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d002      	beq.n	8005e66 <USBD_StdEPReq+0xfe>
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d015      	beq.n	8005e90 <USBD_StdEPReq+0x128>
 8005e64:	e026      	b.n	8005eb4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <USBD_StdEPReq+0x11e>
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d009      	beq.n	8005e86 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fd26 	bl	80068c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fd22 	bl	80068c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e84:	e01c      	b.n	8005ec0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fbe4 	bl	8006656 <USBD_CtlError>
              break;
 8005e8e:	e017      	b.n	8005ec0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	885b      	ldrh	r3, [r3, #2]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d112      	bne.n	8005ebe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fd2d 	bl	8006906 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc23 	bl	80066f8 <USBD_CtlSendStatus>
              }
              break;
 8005eb2:	e004      	b.n	8005ebe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fbcd 	bl	8006656 <USBD_CtlError>
              break;
 8005ebc:	e000      	b.n	8005ec0 <USBD_StdEPReq+0x158>
              break;
 8005ebe:	bf00      	nop
          }
          break;
 8005ec0:	e0aa      	b.n	8006018 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d002      	beq.n	8005ed2 <USBD_StdEPReq+0x16a>
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d032      	beq.n	8005f36 <USBD_StdEPReq+0x1ce>
 8005ed0:	e097      	b.n	8006002 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ed2:	7bbb      	ldrb	r3, [r7, #14]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <USBD_StdEPReq+0x180>
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d004      	beq.n	8005ee8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fbb8 	bl	8006656 <USBD_CtlError>
                break;
 8005ee6:	e091      	b.n	800600c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da0b      	bge.n	8005f08 <USBD_StdEPReq+0x1a0>
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	3310      	adds	r3, #16
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	3304      	adds	r3, #4
 8005f06:	e00b      	b.n	8005f20 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fba2 	bl	8006678 <USBD_CtlSendData>
              break;
 8005f34:	e06a      	b.n	800600c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da11      	bge.n	8005f62 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3318      	adds	r3, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d117      	bne.n	8005f88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb7b 	bl	8006656 <USBD_CtlError>
                  break;
 8005f60:	e054      	b.n	800600c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	f003 020f 	and.w	r2, r3, #15
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fb68 	bl	8006656 <USBD_CtlError>
                  break;
 8005f86:	e041      	b.n	800600c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da0b      	bge.n	8005fa8 <USBD_StdEPReq+0x240>
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	3310      	adds	r3, #16
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	e00b      	b.n	8005fc0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <USBD_StdEPReq+0x266>
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d103      	bne.n	8005fd6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	e00e      	b.n	8005ff4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fcb2 	bl	8006944 <USBD_LL_IsStallEP>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	e002      	b.n	8005ff4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fb3c 	bl	8006678 <USBD_CtlSendData>
              break;
 8006000:	e004      	b.n	800600c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fb26 	bl	8006656 <USBD_CtlError>
              break;
 800600a:	bf00      	nop
          }
          break;
 800600c:	e004      	b.n	8006018 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb20 	bl	8006656 <USBD_CtlError>
          break;
 8006016:	bf00      	nop
      }
      break;
 8006018:	e004      	b.n	8006024 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fb1a 	bl	8006656 <USBD_CtlError>
      break;
 8006022:	bf00      	nop
  }

  return ret;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	2b06      	cmp	r3, #6
 8006052:	f200 8128 	bhi.w	80062a6 <USBD_GetDescriptor+0x276>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <USBD_GetDescriptor+0x2c>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006079 	.word	0x08006079
 8006060:	08006091 	.word	0x08006091
 8006064:	080060d1 	.word	0x080060d1
 8006068:	080062a7 	.word	0x080062a7
 800606c:	080062a7 	.word	0x080062a7
 8006070:	08006247 	.word	0x08006247
 8006074:	08006273 	.word	0x08006273
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	7c12      	ldrb	r2, [r2, #16]
 8006084:	f107 0108 	add.w	r1, r7, #8
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	60f8      	str	r0, [r7, #12]
      break;
 800608e:	e112      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7c1b      	ldrb	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10d      	bne.n	80060b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f107 0208 	add.w	r2, r7, #8
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060b2:	e100      	b.n	80062b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f107 0208 	add.w	r2, r7, #8
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	2202      	movs	r2, #2
 80060cc:	701a      	strb	r2, [r3, #0]
      break;
 80060ce:	e0f2      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	885b      	ldrh	r3, [r3, #2]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	f200 80ac 	bhi.w	8006234 <USBD_GetDescriptor+0x204>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <USBD_GetDescriptor+0xb4>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006165 	.word	0x08006165
 80060f0:	08006199 	.word	0x08006199
 80060f4:	080061cd 	.word	0x080061cd
 80060f8:	08006201 	.word	0x08006201
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	7c12      	ldrb	r2, [r2, #16]
 8006114:	f107 0108 	add.w	r1, r7, #8
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800611e:	e091      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa97 	bl	8006656 <USBD_CtlError>
            err++;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	3301      	adds	r3, #1
 800612c:	72fb      	strb	r3, [r7, #11]
          break;
 800612e:	e089      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	7c12      	ldrb	r2, [r2, #16]
 8006148:	f107 0108 	add.w	r1, r7, #8
 800614c:	4610      	mov	r0, r2
 800614e:	4798      	blx	r3
 8006150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006152:	e077      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa7d 	bl	8006656 <USBD_CtlError>
            err++;
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	3301      	adds	r3, #1
 8006160:	72fb      	strb	r3, [r7, #11]
          break;
 8006162:	e06f      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	7c12      	ldrb	r2, [r2, #16]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006186:	e05d      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa63 	bl	8006656 <USBD_CtlError>
            err++;
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	3301      	adds	r3, #1
 8006194:	72fb      	strb	r3, [r7, #11]
          break;
 8006196:	e055      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7c12      	ldrb	r2, [r2, #16]
 80061b0:	f107 0108 	add.w	r1, r7, #8
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ba:	e043      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa49 	bl	8006656 <USBD_CtlError>
            err++;
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	3301      	adds	r3, #1
 80061c8:	72fb      	strb	r3, [r7, #11]
          break;
 80061ca:	e03b      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	4610      	mov	r0, r2
 80061ea:	4798      	blx	r3
 80061ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ee:	e029      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa2f 	bl	8006656 <USBD_CtlError>
            err++;
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	3301      	adds	r3, #1
 80061fc:	72fb      	strb	r3, [r7, #11]
          break;
 80061fe:	e021      	b.n	8006244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	7c12      	ldrb	r2, [r2, #16]
 8006218:	f107 0108 	add.w	r1, r7, #8
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006222:	e00f      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa15 	bl	8006656 <USBD_CtlError>
            err++;
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	3301      	adds	r3, #1
 8006230:	72fb      	strb	r3, [r7, #11]
          break;
 8006232:	e007      	b.n	8006244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa0d 	bl	8006656 <USBD_CtlError>
          err++;
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	3301      	adds	r3, #1
 8006240:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006242:	e038      	b.n	80062b6 <USBD_GetDescriptor+0x286>
 8006244:	e037      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7c1b      	ldrb	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f107 0208 	add.w	r2, r7, #8
 800625a:	4610      	mov	r0, r2
 800625c:	4798      	blx	r3
 800625e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006260:	e029      	b.n	80062b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f9f6 	bl	8006656 <USBD_CtlError>
        err++;
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	3301      	adds	r3, #1
 800626e:	72fb      	strb	r3, [r7, #11]
      break;
 8006270:	e021      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7c1b      	ldrb	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f107 0208 	add.w	r2, r7, #8
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
 800628a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	2207      	movs	r2, #7
 8006292:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006294:	e00f      	b.n	80062b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9dc 	bl	8006656 <USBD_CtlError>
        err++;
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	3301      	adds	r3, #1
 80062a2:	72fb      	strb	r3, [r7, #11]
      break;
 80062a4:	e007      	b.n	80062b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f9d4 	bl	8006656 <USBD_CtlError>
      err++;
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	3301      	adds	r3, #1
 80062b2:	72fb      	strb	r3, [r7, #11]
      break;
 80062b4:	bf00      	nop
  }

  if (err != 0U)
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11c      	bne.n	80062f6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80062bc:	893b      	ldrh	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d011      	beq.n	80062e6 <USBD_GetDescriptor+0x2b6>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00d      	beq.n	80062e6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88da      	ldrh	r2, [r3, #6]
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf28      	it	cs
 80062d4:	4613      	movcs	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	461a      	mov	r2, r3
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f9c9 	bl	8006678 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	88db      	ldrh	r3, [r3, #6]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa02 	bl	80066f8 <USBD_CtlSendStatus>
 80062f4:	e000      	b.n	80062f8 <USBD_GetDescriptor+0x2c8>
    return;
 80062f6:	bf00      	nop
    }
  }
}
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	889b      	ldrh	r3, [r3, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d130      	bne.n	8006374 <USBD_SetAddress+0x74>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	88db      	ldrh	r3, [r3, #6]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d12c      	bne.n	8006374 <USBD_SetAddress+0x74>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	885b      	ldrh	r3, [r3, #2]
 800631e:	2b7f      	cmp	r3, #127	; 0x7f
 8006320:	d828      	bhi.n	8006374 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	885b      	ldrh	r3, [r3, #2]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	2b03      	cmp	r3, #3
 8006336:	d104      	bne.n	8006342 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f98b 	bl	8006656 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006340:	e01d      	b.n	800637e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7bfa      	ldrb	r2, [r7, #15]
 8006346:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fb24 	bl	800699c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f9cf 	bl	80066f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006368:	e009      	b.n	800637e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006372:	e004      	b.n	800637e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f96d 	bl	8006656 <USBD_CtlError>
  }
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	4b41      	ldr	r3, [pc, #260]	; (80064a0 <USBD_SetConfig+0x118>)
 800639a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800639c:	4b40      	ldr	r3, [pc, #256]	; (80064a0 <USBD_SetConfig+0x118>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d904      	bls.n	80063ae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f955 	bl	8006656 <USBD_CtlError>
 80063ac:	e075      	b.n	800649a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d002      	beq.n	80063be <USBD_SetConfig+0x36>
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d023      	beq.n	8006404 <USBD_SetConfig+0x7c>
 80063bc:	e062      	b.n	8006484 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80063be:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <USBD_SetConfig+0x118>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01a      	beq.n	80063fc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80063c6:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <USBD_SetConfig+0x118>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2203      	movs	r2, #3
 80063d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80063d8:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <USBD_SetConfig+0x118>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff f9e8 	bl	80057b4 <USBD_SetClassConfig>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d104      	bne.n	80063f4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f932 	bl	8006656 <USBD_CtlError>
            return;
 80063f2:	e052      	b.n	800649a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f97f 	bl	80066f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80063fa:	e04e      	b.n	800649a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f97b 	bl	80066f8 <USBD_CtlSendStatus>
        break;
 8006402:	e04a      	b.n	800649a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <USBD_SetConfig+0x118>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d112      	bne.n	8006432 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <USBD_SetConfig+0x118>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800641e:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <USBD_SetConfig+0x118>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff f9e4 	bl	80057f2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f964 	bl	80066f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006430:	e033      	b.n	800649a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006432:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <USBD_SetConfig+0x118>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d01d      	beq.n	800647c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff f9d2 	bl	80057f2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <USBD_SetConfig+0x118>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <USBD_SetConfig+0x118>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff f9a8 	bl	80057b4 <USBD_SetClassConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b02      	cmp	r3, #2
 8006468:	d104      	bne.n	8006474 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8f2 	bl	8006656 <USBD_CtlError>
            return;
 8006472:	e012      	b.n	800649a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f93f 	bl	80066f8 <USBD_CtlSendStatus>
        break;
 800647a:	e00e      	b.n	800649a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f93b 	bl	80066f8 <USBD_CtlSendStatus>
        break;
 8006482:	e00a      	b.n	800649a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8e5 	bl	8006656 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <USBD_SetConfig+0x118>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff f9ad 	bl	80057f2 <USBD_ClrClassConfig>
        break;
 8006498:	bf00      	nop
    }
  }
}
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000074 	.word	0x20000074

080064a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d004      	beq.n	80064c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8cc 	bl	8006656 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064be:	e022      	b.n	8006506 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	dc02      	bgt.n	80064d0 <USBD_GetConfig+0x2c>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dc03      	bgt.n	80064d6 <USBD_GetConfig+0x32>
 80064ce:	e015      	b.n	80064fc <USBD_GetConfig+0x58>
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d00b      	beq.n	80064ec <USBD_GetConfig+0x48>
 80064d4:	e012      	b.n	80064fc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3308      	adds	r3, #8
 80064e0:	2201      	movs	r2, #1
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8c7 	bl	8006678 <USBD_CtlSendData>
        break;
 80064ea:	e00c      	b.n	8006506 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	2201      	movs	r2, #1
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8bf 	bl	8006678 <USBD_CtlSendData>
        break;
 80064fa:	e004      	b.n	8006506 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f8a9 	bl	8006656 <USBD_CtlError>
        break;
 8006504:	bf00      	nop
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651e:	3b01      	subs	r3, #1
 8006520:	2b02      	cmp	r3, #2
 8006522:	d81e      	bhi.n	8006562 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	88db      	ldrh	r3, [r3, #6]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d004      	beq.n	8006536 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f891 	bl	8006656 <USBD_CtlError>
        break;
 8006534:	e01a      	b.n	800656c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f043 0202 	orr.w	r2, r3, #2
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	330c      	adds	r3, #12
 8006556:	2202      	movs	r2, #2
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f88c 	bl	8006678 <USBD_CtlSendData>
      break;
 8006560:	e004      	b.n	800656c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f876 	bl	8006656 <USBD_CtlError>
      break;
 800656a:	bf00      	nop
  }
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d106      	bne.n	8006594 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f8b2 	bl	80066f8 <USBD_CtlSendStatus>
  }
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ac:	3b01      	subs	r3, #1
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d80b      	bhi.n	80065ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10c      	bne.n	80065d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f898 	bl	80066f8 <USBD_CtlSendStatus>
      }
      break;
 80065c8:	e004      	b.n	80065d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f842 	bl	8006656 <USBD_CtlError>
      break;
 80065d2:	e000      	b.n	80065d6 <USBD_ClrFeature+0x3a>
      break;
 80065d4:	bf00      	nop
  }
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	785a      	ldrb	r2, [r3, #1]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	3302      	adds	r3, #2
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	3303      	adds	r3, #3
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	b29b      	uxth	r3, r3
 800660c:	4413      	add	r3, r2
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	3304      	adds	r3, #4
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	3305      	adds	r3, #5
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	b29b      	uxth	r3, r3
 8006628:	4413      	add	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	3306      	adds	r3, #6
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	3307      	adds	r3, #7
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	b29b      	uxth	r3, r3
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	b29b      	uxth	r3, r3
 8006644:	4413      	add	r3, r2
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	80da      	strh	r2, [r3, #6]

}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr

08006656 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006660:	2180      	movs	r1, #128	; 0x80
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f930 	bl	80068c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006668:	2100      	movs	r1, #0
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f92c 	bl	80068c8 <USBD_LL_StallEP>
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2202      	movs	r2, #2
 800668a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	2100      	movs	r1, #0
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f99a 	bl	80069da <USBD_LL_Transmit>

  return USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	2100      	movs	r1, #0
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f988 	bl	80069da <USBD_LL_Transmit>

  return USBD_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	2100      	movs	r1, #0
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f999 	bl	8006a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2204      	movs	r2, #4
 8006704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006708:	2300      	movs	r3, #0
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f963 	bl	80069da <USBD_LL_Transmit>

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2205      	movs	r2, #5
 800672a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800672e:	2300      	movs	r3, #0
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f973 	bl	8006a20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7ff f85c 	bl	8005818 <USBD_LL_SetupStage>
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	440b      	add	r3, r1
 8006788:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	4619      	mov	r1, r3
 8006792:	f7ff f88e 	bl	80058b2 <USBD_LL_DataOutStage>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80067b0:	78fa      	ldrb	r2, [r7, #3]
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	440b      	add	r3, r1
 80067be:	333c      	adds	r3, #60	; 0x3c
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	4619      	mov	r1, r3
 80067c6:	f7ff f8e5 	bl	8005994 <USBD_LL_DataInStage>
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff f9f5 	bl	8005bd0 <USBD_LL_SOF>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d001      	beq.n	8006806 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006802:	f7f9 fdeb 	bl	80003dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800680c:	7bfa      	ldrb	r2, [r7, #15]
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff f9a5 	bl	8005b60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff f95e 	bl	8005ade <USBD_LL_Reset>
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff f99f 	bl	8005b7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <HAL_PCD_SuspendCallback+0x30>)
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	4a03      	ldr	r2, [pc, #12]	; (800685c <HAL_PCD_SuspendCallback+0x30>)
 800684e:	f043 0306 	orr.w	r3, r3, #6
 8006852:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff f999 	bl	8005ba6 <USBD_LL_Resume>
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	4608      	mov	r0, r1
 8006886:	4611      	mov	r1, r2
 8006888:	461a      	mov	r2, r3
 800688a:	4603      	mov	r3, r0
 800688c:	70fb      	strb	r3, [r7, #3]
 800688e:	460b      	mov	r3, r1
 8006890:	70bb      	strb	r3, [r7, #2]
 8006892:	4613      	mov	r3, r2
 8006894:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80068a4:	78bb      	ldrb	r3, [r7, #2]
 80068a6:	883a      	ldrh	r2, [r7, #0]
 80068a8:	78f9      	ldrb	r1, [r7, #3]
 80068aa:	f7fa fab3 	bl	8000e14 <HAL_PCD_EP_Open>
 80068ae:	4603      	mov	r3, r0
 80068b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f8d7 	bl	8006a68 <USBD_Get_USB_Status>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068be:	7bbb      	ldrb	r3, [r7, #14]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	4611      	mov	r1, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fa fb7a 	bl	8000fe0 <HAL_PCD_EP_SetStall>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f8b8 	bl	8006a68 <USBD_Get_USB_Status>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006920:	78fa      	ldrb	r2, [r7, #3]
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7fa fbbb 	bl	80010a0 <HAL_PCD_EP_ClrStall>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 f899 	bl	8006a68 <USBD_Get_USB_Status>
 8006936:	4603      	mov	r3, r0
 8006938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800693a:	7bbb      	ldrb	r3, [r7, #14]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da0c      	bge.n	800697a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	3302      	adds	r3, #2
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	e00b      	b.n	8006992 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	440b      	add	r3, r1
 800698c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006990:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fa fa05 	bl	8000dca <HAL_PCD_SetAddress>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f84e 	bl	8006a68 <USBD_Get_USB_Status>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	461a      	mov	r2, r3
 80069e6:	460b      	mov	r3, r1
 80069e8:	72fb      	strb	r3, [r7, #11]
 80069ea:	4613      	mov	r3, r2
 80069ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069fc:	893b      	ldrh	r3, [r7, #8]
 80069fe:	7af9      	ldrb	r1, [r7, #11]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	f7fa faaa 	bl	8000f5a <HAL_PCD_EP_Transmit>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f82b 	bl	8006a68 <USBD_Get_USB_Status>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a16:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	72fb      	strb	r3, [r7, #11]
 8006a30:	4613      	mov	r3, r2
 8006a32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a42:	893b      	ldrh	r3, [r7, #8]
 8006a44:	7af9      	ldrb	r1, [r7, #11]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	f7fa fa4a 	bl	8000ee0 <HAL_PCD_EP_Receive>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f808 	bl	8006a68 <USBD_Get_USB_Status>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d817      	bhi.n	8006aac <USBD_Get_USB_Status+0x44>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <USBD_Get_USB_Status+0x1c>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006a95 	.word	0x08006a95
 8006a88:	08006a9b 	.word	0x08006a9b
 8006a8c:	08006aa1 	.word	0x08006aa1
 8006a90:	08006aa7 	.word	0x08006aa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
    break;
 8006a98:	e00b      	b.n	8006ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a9e:	e008      	b.n	8006ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa4:	e005      	b.n	8006ab2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8006aaa:	e002      	b.n	8006ab2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006aac:	2302      	movs	r3, #2
 8006aae:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab0:	bf00      	nop
  }
  return usb_status;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	4d0c      	ldr	r5, [pc, #48]	; (8006af8 <__libc_init_array+0x38>)
 8006ac6:	4c0d      	ldr	r4, [pc, #52]	; (8006afc <__libc_init_array+0x3c>)
 8006ac8:	1b64      	subs	r4, r4, r5
 8006aca:	10a4      	asrs	r4, r4, #2
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	f000 f822 	bl	8006b18 <_init>
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4d0a      	ldr	r5, [pc, #40]	; (8006b00 <__libc_init_array+0x40>)
 8006ad8:	4c0a      	ldr	r4, [pc, #40]	; (8006b04 <__libc_init_array+0x44>)
 8006ada:	1b64      	subs	r4, r4, r5
 8006adc:	10a4      	asrs	r4, r4, #2
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	08006b50 	.word	0x08006b50
 8006afc:	08006b50 	.word	0x08006b50
 8006b00:	08006b50 	.word	0x08006b50
 8006b04:	08006b54 	.word	0x08006b54

08006b08 <memset>:
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4402      	add	r2, r0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d100      	bne.n	8006b12 <memset+0xa>
 8006b10:	4770      	bx	lr
 8006b12:	f803 1b01 	strb.w	r1, [r3], #1
 8006b16:	e7f9      	b.n	8006b0c <memset+0x4>

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
